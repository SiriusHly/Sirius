/*
Navicat MySQL Data Transfer

Source Server         : 123.56.219.53_3306
Source Server Version : 50724
Source Host           : 123.56.219.53:3407
Source Database       : sirius

Target Server Type    : MYSQL
Target Server Version : 50724
File Encoding         : 65001

Date: 2018-11-30 20:52:20
*/

SET FOREIGN_KEY_CHECKS=0;
-- ----------------------------
-- Table structure for `article`
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `articleId` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) NOT NULL,
  `articleTitle` varchar(255) DEFAULT NULL,
  `articleContent` text,
  `articleCreateTime` datetime DEFAULT NULL,
  `articleViewCount` int(11) DEFAULT '0',
  `articleLikeCount` int(11) DEFAULT NULL,
  `articleOrder` int(11) DEFAULT '1',
  PRIMARY KEY (`articleId`),
  KEY `FK_USER_ARTICLE` (`username`),
  CONSTRAINT `FK_USER_ARTICLE` FOREIGN KEY (`username`) REFERENCES `user` (`username`)
) ENGINE=InnoDB AUTO_INCREMENT=84 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article
-- ----------------------------
INSERT INTO `article` VALUES ('4', 'hly', 'MarkDown编辑器的使用', '### 主要特性\n\n- 支持“标准”Markdown / CommonMark和Github风格的语法，也可变身为代码编辑器；\n- 支持实时预览、图片（跨域）上传、预格式文本/代码/表格插入、代码折叠、搜索替换、只读模式、自定义样式主题和多语言语法高亮等功能；\n- 支持ToC（Table of Contents）、Emoji表情、Task lists、@链接等Markdown扩展语法；\n- 支持TeX科学公式（基于KaTeX）、流程图 Flowchart 和 时序图 Sequence Diagram;\n- 支持识别和解析HTML标签，并且支持自定义过滤标签解析，具有可靠的安全性和几乎无限的扩展性；\n- 支持 AMD / CMD 模块化加载（支持 Require.js & Sea.js），并且支持自定义扩展插件；\n- 兼容主流的浏览器（IE8+）和Zepto.js，且支持iPad等平板设备；\n- 支持自定义主题样式；\n\n# Editor.md\n\n![](https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png)\n\n![](https://img.shields.io/github/stars/pandao/editor.md.svg) ![](https://img.shields.io/github/forks/pandao/editor.md.svg) ![](https://img.shields.io/github/tag/pandao/editor.md.svg) ![](https://img.shields.io/github/release/pandao/editor.md.svg) ![](https://img.shields.io/github/issues/pandao/editor.md.svg) ![](https://img.shields.io/bower/v/editor.md.svg)\n\n**目录 (Table of Contents)**\n\n[TOCM]\n\n[TOC]\n\n# Heading 1\n## Heading 2\n### Heading 3\n#### Heading 4\n##### Heading 5\n###### Heading 6\n# Heading 1 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n## Heading 2 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n### Heading 3 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n#### Heading 4 link [Heading link](https://github.com/pandao/editor.md \"Heading link\") Heading link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n##### Heading 5 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n###### Heading 6 link [Heading link](https://github.com/pandao/editor.md \"Heading link\")\n\n#### 标题（用底线的形式）Heading (underline)\n\nThis is an H1\n=============\n\nThis is an H2\n-------------\n\n### 字符效果和横线等\n                \n----\n\n~~删除线~~ <s>删除线（开启识别HTML标签时）</s>\n*斜体字*      _斜体字_\n**粗体**  __粗体__\n***粗斜体*** ___粗斜体___\n\n上标：X<sub>2</sub>，下标：O<sup>2</sup>\n\n**缩写(同HTML的abbr标签)**\n\n> 即更长的单词或短语的缩写形式，前提是开启识别HTML标签时，已默认开启\n\nThe <abbr title=\"Hyper Text Markup Language\">HTML</abbr> specification is maintained by the <abbr title=\"World Wide Web Consortium\">W3C</abbr>.\n\n### 引用 Blockquotes\n\n> 引用文本 Blockquotes\n\n引用的行内混合 Blockquotes\n                    \n> 引用：如果想要插入空白换行`即<br />标签`，在插入处先键入两个以上的空格然后回车即可，[普通链接](http://localhost/)。\n\n### 锚点与链接 Links\n\n[普通链接](http://localhost/)\n\n[普通链接带标题](http://localhost/ \"普通链接带标题\")\n\n直接链接：<https://github.com>\n\n[锚点链接][anchor-id] \n\n[anchor-id]: http://www.this-anchor-link.com/\n\nGFM a-tail link @pandao\n\n> @pandao\n\n### 多语言代码高亮 Codes\n\n#### 行内代码 Inline code\n\n执行命令：`npm install marked`\n\n#### 缩进风格\n\n即缩进四个空格，也做为实现类似`<pre>`预格式化文本(Preformatted Text)的功能。\n\n    <?php\n        echo \"Hello world!\";\n    ?>\n    \n预格式化文本：\n\n    | First Header  | Second Header |\n    | ------------- | ------------- |\n    | Content Cell  | Content Cell  |\n    | Content Cell  | Content Cell  |\n\n#### JS代码　\n\n```javascript\nfunction test(){\n	console.log(\"Hello world!\");\n}\n \n(function(){\n    var box = function(){\n        return box.fn.init();\n    };\n\n    box.prototype = box.fn = {\n        init : function(){\n            console.log(\'box.init()\');\n\n			return this;\n        },\n\n		add : function(str){\n			alert(\"add\", str);\n\n			return this;\n		},\n\n		remove : function(str){\n			alert(\"remove\", str);\n\n			return this;\n		}\n    };\n    \n    box.fn.init.prototype = box.fn;\n    \n    window.box =box;\n})();\n\nvar testBox = box();\ntestBox.add(\"jQuery\").remove(\"jQuery\");\n```\n\n#### HTML代码 HTML codes\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <mate charest=\"utf-8\" />\n        <title>Hello world!</title>\n    </head>\n    <body>\n        <h1>Hello world!</h1>\n    </body>\n</html>\n```\n\n### 图片 Images\n\nImage:\n\n![](https://pandao.github.io/editor.md/examples/images/4.jpg)\n\n> Follow your heart.\n\n![](https://pandao.github.io/editor.md/examples/images/8.jpg)\n\n> 图为：厦门白城沙滩\n\n图片加链接 (Image + Link)：\n\n[![](https://pandao.github.io/editor.md/examples/images/7.jpg)](https://pandao.github.io/editor.md/examples/images/7.jpg \"李健首张专辑《似水流年》封面\")\n\n> 图为：李健首张专辑《似水流年》封面\n                \n----\n\n### 列表 Lists\n\n#### 无序列表（减号）Unordered Lists (-)\n                \n- 列表一\n- 列表二\n- 列表三\n     \n#### 无序列表（星号）Unordered Lists (*)\n\n* 列表一\n* 列表二\n* 列表三\n\n#### 无序列表（加号和嵌套）Unordered Lists (+)\n                \n+ 列表一\n+ 列表二\n    + 列表二-1\n    + 列表二-2\n    + 列表二-3\n+ 列表三\n    * 列表一\n    * 列表二\n    * 列表三\n\n#### 有序列表 Ordered Lists (-)\n                \n1. 第一行\n2. 第二行\n3. 第三行\n\n#### GFM task list\n\n- [x] GFM task list 1\n- [x] GFM task list 2\n- [ ] GFM task list 3\n    - [ ] GFM task list 3-1\n    - [ ] GFM task list 3-2\n    - [ ] GFM task list 3-3\n- [ ] GFM task list 4\n    - [ ] GFM task list 4-1\n    - [ ] GFM task list 4-2\n                \n----\n                    \n### 绘制表格 Tables\n\n| 项目        | 价格   |  数量  |\n| --------   | -----:  | :----:  |\n| 计算机      | $1600   |   5     |\n| 手机        |   $12   |   12   |\n| 管线        |    $1    |  234  |\n                    \nFirst Header  | Second Header\n------------- | -------------\nContent Cell  | Content Cell\nContent Cell  | Content Cell \n\n| First Header  | Second Header |\n| ------------- | ------------- |\n| Content Cell  | Content Cell  |\n| Content Cell  | Content Cell  |\n\n| Function name | Description                    |\n| ------------- | ------------------------------ |\n| `help()`      | Display the help window.       |\n| `destroy()`   | **Destroy your computer!**     |\n\n| Left-Aligned  | Center Aligned  | Right Aligned |\n| :------------ |:---------------:| -----:|\n| col 3 is      | some wordy text | $1600 |\n| col 2 is      | centered        |   $12 |\n| zebra stripes | are neat        |    $1 |\n\n| Item      | Value |\n| --------- | -----:|\n| Computer  | $1600 |\n| Phone     |   $12 |\n| Pipe      |    $1 |\n                \n----\n\n#### 特殊符号 HTML Entities Codes\n\n&copy; &  &uml; &trade; &iexcl; &pound;\n&amp; &lt; &gt; &yen; &euro; &reg; &plusmn; &para; &sect; &brvbar; &macr; &laquo; &middot; \n\nX&sup2; Y&sup3; &frac34; &frac14;  &times;  &divide;   &raquo;\n\n18&ordm;C  &quot;  &apos;\n\n### Emoji表情 :smiley:\n\n> Blockquotes :star:\n\n#### GFM task lists & Emoji & fontAwesome icon emoji & editormd logo emoji :editormd-logo-5x:\n\n- [x] :smiley: @mentions, :smiley: #refs, [links](), **formatting**, and <del>tags</del> supported :editormd-logo:;\n- [x] list syntax required (any unordered or ordered list supported) :editormd-logo-3x:;\n- [x] [ ] :smiley: this is a complete item :smiley:;\n- [ ] []this is an incomplete item [test link](#) :fa-star: @pandao; \n- [ ] [ ]this is an incomplete item :fa-star: :fa-gear:;\n    - [ ] :smiley: this is an incomplete item [test link](#) :fa-star: :fa-gear:;\n    - [ ] :smiley: this is  :fa-star: :fa-gear: an incomplete item [test link](#);\n \n#### 反斜杠 Escape\n\n\\*literal asterisks\\*\n            \n### 科学公式 TeX(KaTeX)\n                    \n$$E=mc^2$$\n\n行内的公式$$E=mc^2$$行内的公式，行内的$$E=mc^2$$公式。\n\n$$\\(\\sqrt{3x-1}+(1+x)^2\\)$$\n                    \n$$\\sin(\\alpha)^{\\theta}=\\sum_{i=0}^{n}(x^i + \\cos(f))$$\n\n多行公式：\n\n```math\n\\displaystyle\n\\left( \\sum\\_{k=1}^n a\\_k b\\_k \\right)^2\n\\leq\n\\left( \\sum\\_{k=1}^n a\\_k^2 \\right)\n\\left( \\sum\\_{k=1}^n b\\_k^2 \\right)\n```\n\n```katex\n\\displaystyle \n    \\frac{1}{\n        \\Bigl(\\sqrt{\\phi \\sqrt{5}}-\\phi\\Bigr) e^{\n        \\frac25 \\pi}} = 1+\\frac{e^{-2\\pi}} {1+\\frac{e^{-4\\pi}} {\n        1+\\frac{e^{-6\\pi}}\n        {1+\\frac{e^{-8\\pi}}\n         {1+\\cdots} }\n        } \n    }\n```\n\n```latex\nf(x) = \\int_{-\\infty}^\\infty\n    \\hat f(\\xi)\\,e^{2 \\pi i \\xi x}\n    \\,d\\xi\n```\n                \n### 绘制流程图 Flowchart\n\n```flow\nst=>start: 用户登陆\nop=>operation: 登陆操作\ncond=>condition: 登陆成功 Yes or No?\ne=>end: 进入后台\n\nst->op->cond\ncond(yes)->e\ncond(no)->op\n```\n                    \n### 绘制序列图 Sequence Diagram\n                    \n```seq\nAndrew->China: Says Hello \nNote right of China: China thinks\\nabout it \nChina-->Andrew: How are you? \nAndrew->>China: I am good thanks!\n```\n\n### End', '2018-02-17 02:50:36', '18', null, '1');
INSERT INTO `article` VALUES ('5', 'hly', 'Docker $ 第二篇：Docker镜像的使用', '###  一.Docker镜像简介\n\n  1.镜像是Docker三大组件之一，Docker运行容器需要对应的镜像，如果说镜像是程序，那容器就是进程,如果本地不存在镜像，Docker就会从仓库自动下载镜像。\n\n### 二.Docker使用镜像\n\n+ ##### 拉取镜像\n```\n# docker pull huangliangyun/hello-world:v1\n```\n**语法**\n>1. \\# docker pull [选项][Docker Registry 地址[:端口号]/]仓库名[:标签]\n>2. 地址格式：<域名/IP>[:端口号]	。默认地址是 Docker Hub。\n>3. 仓库名格式：<用户名>/<软件名>(用户名默认为librury）。\n+ ##### 查看镜像\n```\n# 查看所有镜像\n# docker images\n```\n**语法**\n>1. \\#  docker images [OPTIONS] [REPOSITORY[:TAG]]\n\n+ ##### 删除镜像\n```\n# 删除所有镜像\n# docker rmi $(docker images)\n```\n**语法**\n>1. \\#  docker rmi [OPTIONS] IMAGE [IMAGE...]\n\n### 三.commit 定制镜像\n\n##### 原则：\n> 1.不轻易适应，应使用Dockerfile完成。\n2.除了改动的文件，很多无关文件被修改、添加，导致镜像臃肿，难以维护。\n3.可用作入侵后保存现场。\n\n##### 原理：\n> 1.在原有镜像的基础上，叠加上容器的存储层。\n2.将容器存储层保存下来成为镜像。\n\n##### 语法：\n>\\# docker commit [选项] <容器ID或容器名> [<仓库名>[:<标签>]]\n#####  实例:\n\n1. 启动容器\n\n```\n# docker run --rm -d -p 80:80 --name webserver nginx\n```\n通过80端口可访问到nginx页面\n \n2. 进入容器\n\n```\n# docker exec -it webserver bash\n```\n3. 更改页面信息\n\n```\n/# echo \'<h1>Hello,Docker!</h1>\'>/usr/share/nginx/html/index.html\n```\n修改后再次访问页面，发现内容已变\n\n4. 退出容器\n\n```\n/# exit\n```\n5. 保存为新的镜像\n\n```\n# docker commit --author \"hly <1136513099@qq.com>\" --message \"修改网页\" webserver nginx:v2\n```\n6. 关闭旧容器，运行新镜像\n\n```\n# docker rm -f $(docker ps -aq) \n# docker run  --rm -d -p 80:80 --name webserver nginx:v2\n```\n内容为修改后的内容\n\n7. 可关闭新容器，运行旧镜像\n\n```\n# docker rm -f $(docker ps -aq) \n# docker run --rm -d -p 80:80 --name webserver nginx\n```\n原来的镜像没有变化。\n\n8. 查看改动内容\n\n```\n# docker diff webserver\n```\n9. 查看镜像历史\n\n```\n# docker history nginx:v2\n```\n\n### 四.Dockerfile定制镜像\n\n##### 原理\n>1.镜像定制是定制每一层添加的配置、文件。\n2.把每一层修改、安装、构建、操作都写入一个脚本，用这个脚本定制镜像。\n3.Dockerfile是文本文件，包含一条条指令，每一条指令构建一层，描述该层如何构建。\n\n#####  特点\n> 构建的镜像透明，体积不臃肿，易于维护。\n\n##### 实例\n\n1. 在空文件夹下创建一个Dockerfile(名字可不为Dockerfile)\n```\n# mkdir myngnix\n# cd mynginx\n# touch Dockerfile\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181027192203463.png)\n\n2. 在Dockerfile文件里面输入以下内容\n```\nFROM nginx\nRUN echo \'<h1>Hello,Docker!</h1>\'       > /usr/share/nginx/html/index.html\n```\n> + FROM\n> 1.指定镜像基础(以一个镜像为基础，在其上进行定制)\n> + RUN\n> 1.每一个RUN指令建立一层镜像。\n> 2.可用&&将各命令串联，简化为一层。\n> 3.支持行尾添加\\换行，首行#注释。\n\n3.  构建镜像\n\n```\n# docker build -t nginx:v3 .\n```\n(文件所在目录执行,末尾有点,指上下文目录)\n\n**过程**\n>1.RUN指令启动容器。\n\n >\\# docker build [选项] <上下文路径/URL/->\n 2.提交修改(层)。\n 3.删除容器。\n \n**参数**\n>-f：指定要使用的Dockerfile路径\n-m：设置内存最大值\n--no-cache：创建镜像的过程不使用缓存\n--pull：尝试去更新镜像的新版本\n-quiet, -q：安静模式，成功后只输出镜像 ID\n--rm：设置镜像成功后删除中间容器\n--tag, -t：镜像的名字及标签\n\n**注意事项**\n>1.不能放到根目录，否则会打包硬盘下所有文件。\n2.可以写.dockerignore剔除不需要上下文传递给docker引擎文件。\n3.可用-f ../xx/指定某个文件作为Dockerfile.\n4.支持URL构建:docker build	https://github.com/xxx。\n\n4. 构建成功后查看镜像\n```\n# docker images\n```\n', '2018-03-17 02:50:36', '22', null, '1');
INSERT INTO `article` VALUES ('6', 'hly', 'Docker $ Docker三剑客：Docker-Compose', '### 一.Docker-Compose 简介\n**简介**\n>1.Docker官方三剑客项目之一。\n>2.负责快速部署分布式应用。\n>3.定义和运行多个Docker容器应用。\n>4.微服务一般有多个实例，为了提高效率，使用Compose管理容器，无需每个微服务都要手动启停。\n\n**功能**\n>1.有时候，我们的一个项目由多个服务，如Web项目，数据库，负载均衡相互配合完成某项任务，这时就需要docker-compose。\n>2.通过docker-compose.yml模板文件定义一组关联的容器为一个项目(project)。\n>3.默认管理对象是项目，通过子命令对项目中一组容器进行便捷声明周期管理。\n\n**基本概念**\n+ 1.服务(service)\n>1.应用容器，可以包括若干相同镜像的容器实例。\n\n+ 2 .项目(project)\n>1.一组关联的应用容器组成完整的业务单元。\n>2.一个项目由多个服务(容器)关联而成,compose 面向项目进行管理。\n>3.在docker-compose.yml文件中定义。\n\n### 二.实战(CentOS)\n##### 1.下载docker-compose\n```\n# curl -L https://github.com/docker/compose/releases/download/1.20.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\n```\n##### 2.安装\n\n```\n# chmod +x /usr/local/bin/docker-compose\n```\n##### 3.查看版本\n\n```\n# docker-compose version\n```\n##### 5.在任意目录新建文件夹\n\n```\n# mkdir hlyCompose\n```\n##### 6.进入文件夹\n\n```\n# cd hlyCompose\n```\n##### 7.新建文件加入代码\n```\n# vi app.py\n```\n\n```\nfrom flask import Flask\nfrom redis import Redis\napp=Flask(__name__)\nredis=Redis(host=\'redis\',port=6379)\n@app.route(\'/\')\ndef hello():\n     count      = redis.incr(\'hits\')\n     return     \'Hello World! 该页面已被访问{}  次。\\n\'.format(count)\nif __name__ == \"__main__\":\n       app.run(host=\"0.0.0.0\",debug=True)\n\n```\n保存退出\n##### 8.编写Dockerfile文件\n\n```\n# vi Dockerfile\n```\n```\nFROM python:3.6-alpine\nADD . /code\nWORKDIR /code\nRUN pip install redis flask\nCMD [\"python\", \"app.py\"]\n```\n##### 9.编写docker-compose.yml\n```\n# vi docker-compose.yml\n```\n```\nversion: \'3\'\nservices:\n   web:\n        build:  .\n        ports:\n            - \"5000:5000\"\n\n   redis:\n       image: \"redis:alpine\"\n\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181102095509795.png)\n\n##### 10.执行命令\n\n```\n# docker-compose up\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181102101024376.png)\n##### 11.输入网址:5000刷新访问\n完成！\n>参考<https://yeasy.gitbooks.io/docker_practice/content/>', '2018-04-17 02:50:36', '12', null, '1');
INSERT INTO `article` VALUES ('7', 'hly', 'Docker $ 第三篇 ：Docker容器的使用', '### 一.Docker容器简介\n   1.镜像和容器的关系，就像面向对象的程序设计中的类和实例，镜像是静态的，容器是镜像运行后产生的，容器1可被创建，启动，停止，删除。\n   2.容器是一个独立的空间，就下宿主下的操作系统，有自己的文件系统，网络配置，进程，由于容器的隔离性，在容器下运行的应用比在宿主下更加安全。\n   3.容器和镜像一样都是分层存储，容器以镜像为基础运行，运行时创建一个当前容器的存储层，存储层的生命周期和容器一样，容器消亡，存储层也消亡，保存于存储层的信息随着容器消亡而消失，所以，文件的写入操作，应该使用数据卷(Volume),数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡，数据也不会丢失。\n   \n   ### 二.Docker容器命令\n   \n   + ##### 运行容器 \\# docker run\n   **功能**\n   >创建一个新的容器并运行一个命令\n   \n   **语法**\n  \n\n>\\# docker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n\n   **参数**\n   >-d : 后台运行容器，返回容器id\n   >-t : 让docker分配一个伪终端，绑定到容器标准输入上，通常与 -i 同时使用。\n   >-it : -i：交互式操作，-t：终端，进入bash执行命令查看返回结果，需要交互式终端。\n   >-i : 以交互模式运行容器，让容器的标准输入保持打开，通常与 -t 同时使用。\n   >--rm : 容器退出后删除容器(避免浪费空间)，可选，docker rm conName 删除容器。\n   >--name : 命名\n   >-p : 暴露给外部的端口，主机(宿主)端口:容器端口\n   >bash : 镜像后的命令，shell交互模式。\n\n   **实例**\n\n```\n# docker run --rm -d -p 80:80 --name webserver nginx\n# docker exec -it webserver bash \n```\n\n+ ##### 进入容器\\# docker attach\n\n **功能**\n >连接到正在运行中的容器,进行命令操作。\n \n **语法**\n >docker attach [OPTIONS] CONTAINER\n \n **参数**\n >--sig-proxy=false ：CTRL-C不会关闭容器\n >\n **实例**\n \n```\n# docker attach --sig-proxy=false b11\n```\n\n+ ##### 进入容器\\# docker exec\n\n **功能**\n >连接到正在运行中的容器,进行命令操作。\n \n **语法**\n > docker exec -it [ID Or NANME] bash\n \n **参数**\n >-i :以交互模式运行容器，让容器的标准输入保持打开，通常与 -t 同时使用。\n >-t :让docker分配一个伪终端，绑定到容器标准输入上，通常与 -i 同时使用。\n >-it :-i：交互式操作，-t：终端，进入bash执行命令查看返回结果，需要交互式终端。\n\n **实例**\n\n```\n# docker run --rm -d -p 80:80 --name webserver nginx\n# docker exec -it webserver bash \n```\n\n+ ##### 终止容器 # docker stop\n\n **语法**\n >\\# docker stop [ID Or NANME]\n \n + ##### 重启容器 # docker restart\n **语法**\n >\\# docker restart [ID Or NANME]\n \n + ##### 启动已终止容器 # docker start \n **语法**\n >\\# docker start [ID Or NANME]\n\n+ ##### 删除容器  # docker rm\n\n **语法**\n \n **1.删除单个停止的容器**\n \n```\n# docker container rm [ID Or NANME]\n# docker rm [ID Or NANME]\n```\n**2.删除所有容器**\n```\n# 停止并删除所有容器\n# docker rm -f $(docker ps -aq)\n# docker stop $(docker ps -q) & docker rm $(docker ps -aq)\n```\n```\n# 删除所有运行的容器\n# docker rm -f $(docker ps -q)\n```\n```\n# 删除所有停止的容器\n# docker container prune\n```\n+ ##### 列出容器 \\# docker ps\n\n **功能**\n >列出容器\n \n **语法**\n \n\n>\\# docker ps [OPTIONS]\n\n **参数**\n>-a :显示所有的容器，包括未运行的。\n>-l :显示最近创建的容器。\n>-f :根据条件过滤显示的内容。\n>-n :列出最近创建的n个容器。\n>-q :静默模式，只显示容器编号。\n>\n **实例**\n```\n# docker ps -a\n```\n+ ##### 查看容器信息 \\# docker inspect\n\n **功能**\n >获取容器和镜像的信息\n >\n **语法**\n >docker inspect [OPTIONS] NAME|ID [NAME|ID...]\n \n **参数**\n >-f :指定返回值的模板文件。\n >-s :显示总的文件大小。\n >--type :为指定类型返回JSON。\n \n **实例**\n```\n# docker inspect nginx\n```\n+ ##### 查看容器进程信息 \\# docker top\n\n **功能**\n >查看容器中运行的进程信息,支持 ps 命令参数\n >\n **语法**\n >docker top [OPTIONS] CONTAINER [ps OPTIONS]\n \n+ ##### 容器的日志 # docker logs\n\n **功能**\n >获取容器的日志\n \n **语法**\n >docker logs [OPTIONS] CONTAINER\n >\n **参数**\n >-f : 跟踪日志输出\n >--since :显示某个开始时间的所有日志\n >-t : 显示时间戳\n >--tail :仅列出最新N条容器日志\n \n+ ##### 容器端口映射 # docker port\n\n **功能**\n >列出指定的容器的端口映射\n \n **语法**\n >docker port [OPTIONS] CONTAINER [PRIVATE_PORT[/PROTO]]\n ', '2018-05-08 02:50:36', '22', null, '1');
INSERT INTO `article` VALUES ('8', 'hly', 'Docker $ 第四篇 ：Docker仓库的使用', '### 一.Docker仓库简介\n1.仓库(Repository)是集中存放镜像的地方，每个仓库有多个镜像。[Docker hub](https://hub.docker.com/)是Docker官方维护的公共仓库，这里存放了大量的镜像，大部分镜像都可以在这里拉取。\n2.注册服务器(Registry)和仓库不同，注册服务器是管理仓库的地方，注册服务器相当于github,注册服务器有很多仓库，仓库相当于项目，每个仓库有不同版本的镜像，相当于不同版本的项目。\n2.在：<https://cloud.docker.com/>可以注册自己的docker账号，然后上传下载自己本地的Docker镜像。\n3.Docker官网：<https://www.docker.com>\n### 二.Docker仓库命令\n+ ##### \\# docker login\n**功能**\n>登录Docker镜像仓库\n>\n**语法**\n>docker login [OPTIONS] [SERVER]\n>\n**实例**\n\n```\n# docker login -u 用户名 -p 密码\n```\n\n+ ##### \\# docker logout\n**功能**\n>登出Docker镜像仓库\n>\n**语法**\n>docker logout [OPTIONS] [SERVER]\n>\n**实例**\n\n```\n# docker logout\n```\n\n+ ##### \\# docker pull \n**功能**\n>从仓库拉取或更新镜像\n>\n**语法**\n>docker pull [OPTIONS] NAME[:TAG(版本)]\n>\n**实例**\n\n```\n# 拉取最新版镜像。\n# docker pull nginx\n```\n```\n# 拉取所有镜像。\n# docker pull -a nginx\n```\n\n\n+ ##### \\# docker push\n**功能**\n>将本地镜像上传到仓库\n>\n**语法**\n>docker push [OPTIONS] NAME[:TAG]\n>\n**实例**\n\n```\n# 上传镜像hly:v1到仓库中\n# docker push hly:v1\n```\n\n+ ##### \\# docker search \n**功能**\n>从Docker Hub查找镜像\n>\n**语法**\n>docker search [OPTIONS] TERM\n>\n**实例**\n\n```\n# 列出收藏数大于10java镜像。\n# docker search -s 10 java\n```\n### 三.实例\n\n##### 1.先在：<https://cloud.docker.com/>注册自己的docker账号\n##### 2.登录\n\n```\n# docker login -u 用户名 -p 密码\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031200322778.png)\n##### 3.拉取一个镜像\n\n```\n# 拉取镜像\n# docker pull huangliangyun/hello-world:v1\n# 查看本地镜像\n# docker images\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031200755827.png)\n##### 4.为刚才拉取这个镜像创建一个标签\n\n```\n# docker tag huangliangyun/hello-world:v1 huangliangyun/hello-world:v2\n# docker images\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031201023686.png)\n第二个为更改标签的镜像\n##### 5.推送镜像\n\n```\n# docker push huangliangyun/hello-world:v2\n```\n访问仓库可以发现上传的镜像\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031201305492.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n##### 6.我们可以删除刚才的镜像，重新拉取\n\n```\n# docker pull huangliangyun/hello-world:v2\n```\n##### 7.注销账号\n\n```\n# docker logout\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031201658966.png)', '2018-06-17 02:50:36', '26', null, '1');
INSERT INTO `article` VALUES ('9', 'hly', 'Docker $ 第五篇 ：Docker数据管理', '### 一.Docker数据卷简介\n1.在Docker内部及容器之间对数据的管理有两种方式，一种是数据卷，另一种是挂载主机目录。\n(1)数据卷(Volumes)：提供一个或多个容器使用的特殊目录，它的特性有\n> + 在容器之间可共享，可重用\n> + 对数据卷的修改立即生效\n> + 对数据卷的更新不会影响镜像\n>  + 容器被删除，数据卷也不会被删除\n>  \n(2)挂载主机目录(Bind mounts)：挂载一个本地主机目录到容器中去，作为数据卷。\n### 二.实战\n#### 2.1.数据卷\n##### 1.创建数据卷\n\n```\n# docker volume create hly-vol\n```\n##### 2.查看数据卷\n\n```\n# docker volume ls\n```\n##### 3.查看数据卷信息\n\n```\n# docker volume inspect hly-vol\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031213101146.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n##### 4.启动容器并挂载数据卷\n\n```\n# docker run -d -p 5000:5000 --name web -v hly-vol:/webapp training/webapp\n```\n> -v 把一个书卷hly-vol挂载到了/webapp目录下\n\n##### 5.查看容器信息\n\n```\n# docker inspect web\n```\n数据卷所在的位置和信息：\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031214339263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n##### 6.其他命令\n\n```\n删除指定数据卷\n# docker volume rm hly-vol\n删除无主数据卷\n# docker volume prune\n```\n#### 2.1.挂载主机目录\n##### 1.启动容器\n\n```\n# docker run -d -p 5000:5000 --name web -v /src/webapp:/webapp training/webapp\n```\n>把本机目录/src/webapp挂载到容器的/webapp下\n>-v /src/webapp:/webapp\n>加ro挂载为为只读，在容器/webapp下创建文件则或报错。\n>-v /src/webapp:/webapp:ro\n##### 2.查看容器信息\n\n```\n# docker inspect web\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031215522837.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n\n', '2018-07-17 02:50:36', '21', null, '1');
INSERT INTO `article` VALUES ('11', 'hly', 'Docker $ 项目部署 ：Docker部署微服务+Mysql', '### 一.准备工作\n这里以两个项目为例：\n[micro-servive-client](https://github.com/huangliangyun/springCloud/tree/master/service-client)\n[micro-servive-server](https://github.com/huangliangyun/springCloud/tree/master/service-server)\n&nbsp;&nbsp;这里配置方面需要注意，服务提供者的host名称为server的镜像名，否则服务无法向注册中心注册。\n\n```\neureka:\n  client:\n    serviceUrl:\n    # server服务端镜像名\n      defaultZone: http://server:8761/eureka/\n```\n\n把项目打包为jar包，然后[上传到linux服务器](https://blog.csdn.net/Sirius_hly/article/details/82590584)。\n### 二.编译镜像\n1.编写server的Dockerfile\n\n```\nFROM java:8\nVOLUME /tmp\nADD server.jar /app.jar\nEXPOSE 8761\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181106212753481.png)\n\n```\n# docker build -t server .\n```\n\n2.编写client的Dockerfile\n\n```\nFROM java:8\nVOLUME /tmp\nADD client.jar /app.jar\nEXPOSE 8762\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181106213128109.png)\n构建镜像\n```\n# docker build -t client .\n```\n### 三.运行服务\n\n#### 3.1.依次以docker命令方式运行\n为了使所有容器在同一个网络内能够相互访问，首先创建一个网桥\n\n```\n# docker network create -d bridge micro\n```\n运行mysql\n\n```\n# docker volume create mysql_vol\n# docker run -it --rm --name mysql -v mysql_vol:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=roof -p 3306:3306 -d --network micro mysql\n```\n运行server\n\n```\n# docker run --name server -d -p 8761:8761 --network micro server\n```\n运行client\n\n```\n# docker run --name client  -p 8762:8762 -d --network micro client\n```\n\n### 3.2.通过docker-compose.yml方式运行\n&nbsp;&nbsp;当服务非常多的时候，一个一个地启动会非常麻烦，我们可以通过编写docker-compose.yml文件，直接命令启动所有的容器。\n1.编写docker-compose.yml文件\n```\nversion: \'2\'\nservices:\n\n mysql:\n    image: mysql\n    restart: always\n    container_name: mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: roof\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - mysql_vol:/var/lib/mysql\n    networks:\n      - micro\n\n server:\n    image: server\n    container_name: server\n    ports:\n      - \"8761:8761\"\n    networks:\n      - micro\n\n client:\n    image: client\n    container_name: client\n    ports:\n      - \"8762:8762\"\n    depends_on:\n      - mysql\n      - server\n    networks:\n      - micro\n\nnetworks:\n  micro:\n    driver: bridge\n\nvolumes:\n  mysql_vol:\n```\n2.启动docker-compose运行项目\n\n```\n# docker-compose up -d\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181106215658767.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181106215636888.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181106213627196.png)\n\n### 四.通过docker-compose.yml直接编排和运行项目\n&nbsp;&nbsp;docker-compose.yml也可以直接构建镜像，然后运行，跳过第二步，根据上传的jar直接使用docker-compose.yml构建镜像。\n\n1.修改docker-compose.yml文件，其他不变\n```\nversion: \'2\'\nservices:\n\n mysql:\n    image: mysql\n    restart: always\n    container_name: mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: roof\n    ports:\n      - \"3306:3306\"\n    volumes:\n      - mysql_vol:/var/lib/mysql\n    networks:\n      - micro\n\n server:\n    image: server\n    build:\n      context: ./server\n      dockerfile: ./Dockerfile\n    container_name: server\n    ports:\n      - \"8761:8761\"\n    networks:\n      - micro\n\n client:\n    image: client\n    build:\n      context: ./client\n      dockerfile: ./Dockerfile\n    container_name: client\n    ports:\n      - \"8762:8762\"\n    depends_on:\n      - mysql\n      - server\n    networks:\n      - micro\n\nnetworks:\n  micro:\n    driver: bridge\nvolumes:\n  mysql_vol:\n```\n改动的关键代码如下\n>    build:\n      context: ./client\n      dockerfile: ./Dockerfile\n      >1.build是构建镜像的命令\n      >2.context是构建的路径\n      >3.dockerfile是dockerfile的路径，相对于构建路径。\n      \n      比如\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20181107091121312.png)\n  ![在这里插入图片描述](https://img-blog.csdnimg.cn/20181107091212194.png)\n2.在docker-compose.yml文件目录下执行命令构建和编排镜像\n\n```\n# docker-compose up -d\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181107091402184.png)', '2018-08-17 02:50:36', '30', null, '1');
INSERT INTO `article` VALUES ('12', 'hly', 'Docker $ 第六篇 ：Docker网络功能', '### 一.Docker网络功能简介\n1.Docker允许通过外部访问容器，容器需要开放一个端口映射到容器外部的端口，外部可通过这个端口访问到联网的容器。\n### 二.外部访问容器\n##### 1.运行容器开放端口\n\n```\n# docker run --rm -d -p 80:80 --name webserver nginx\n```\n访问域名:80即可访问网页\n>-p(小写) :暴露给外部的端口，主机(宿主)端口:容器端口\n>-P(大写) :随机映射一个49000~49900到内部容器开放的端口。\n\n##### 2.查看容器映射到的外部端口\n\n```\n# docker port webserver 80\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031221016707.png)\n\n### 三.Docker容器之间网络连接\n\n##### 1.创建docker网络\n\n```\n# docker network create -d bridge hly-net\n# 查看网络\n# docker network ls\n```\n>\\# docker network create -d bridge [netName]\n>-d：指定Docker网络类型，bridge,overlay(用于Swarm)\n\n##### 2.运行容器\n\n```\n# 运行第一个容器\n# docker run -d -P --name web1 --network hly-net -v /src/webapp:/webapp training/webapp\n```\n\n```\n# 运行第二个容器\ndocker run -d -P --name web2 --network hly-net -v /src/webapp:/webapp training/webapp\n```\n##### 3.进入容器，测试连接\n\n```\n# docker exec -it web1 bash\n# ping web2\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181031222336668.png)\n', '2018-09-17 02:50:36', '47', null, '1');
INSERT INTO `article` VALUES ('19', 'hly', 'Docker $ 项目部署 ：Docker部署SpringBoot+Mysql', '### 一.Dockerfile常用指令\n\n+ #####  FROM\n**目的**\n>指定基础镜像\n>\n**特点**\n>需要写在其他指令之前，之后的指令都依赖于该指令指定的镜像。\n>\n**语法**\n>FROM \\<image>\n>FROM \\<image>:<tag>\n>FROM \\<image>@<digest>\n>\n**实例**\n>FROM java:8\n\n+ #####  ADD\n**目的**\n>1.复制文件\n>\n**语法**\n> ADD [\"<src>\",...\"<dest>\"]\n>ADD \\<src>...\\<dest>\n>从src复制文件到容器的dest。src可以是Dockerfile所在目录的相对路径。\n>\n**实例**\n>ADD spring-boot-docker.jar app.jar\n>拷贝文件并且重命名\n\n+ ##### VOLUME\n**目的**\n>1.加载本地目录下的配置文件到容器目标地址下\n>2.使容器中的一个目录具有持久化存储的功能，该目录可被容器本身使用，也可共享其他容器。。\n>\n**语法**\n>VOLUME [\"<路径1>\",\"<路径2>\"...]\n>VOLUME <路径>\n>\n**实例**\n>VOLUME /tmp\n>VOLUME 指向了一个 /tmp的目录，由于 Spring Boot 使用内置的Tomcat容器，Tomcat 默认使用 /tmp作为工作目录。这个命令的效果是：在宿主机的 /var/lib/docker目录下创建一个临时文件并把它链接到容器中的 /tmp目录\n\n+ ##### EXPOSE\n**目的**\n>声明端口\n>\n**特点**\n>声明容器打算用什么端口，不会自动在宿主进行端口映射。\n>运行时用随机映射，会自动映射EXPOSE的端口。\n>-p <宿主端口>:<容器端口>,将容器对应端口服务公开给外界访问。\n>\n**语法**\n>EXPOSE <端口1> [<端口2>...]\n>\n**实例**\n>EXPOSE 8080\n\n+ ##### ENTRYPOINT\n**目的**\n>入口点，在指定容器启动程序及参数\n>\n**特点**\n>场景一：让镜像变成像命令一样使用。\n>场景二：应用运行前的准备工作。\n>可多次设置，但只有最后一个有效。\n>\n**语法**\n>ENTRYPOINT[\"executable\",\"param1\",\"param2\"]\n>ENTRYPOINT command param1 param2\n>\n**实例**\n>ENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n>为了缩短 Tomcat 的启动时间，添加 java.security.egd的系统属性指向 /dev/urandom作为 ENTRYPOINT\n>\n### 二.部署SpringBoot+Mysql\n\n#####  1.准备部署项目\n1.完整项目在笔者github：[spring-boot-docker](https://github.com/huangliangyun/Spring-Boot-2.X/tree/master/spring-boot-docker)\n2.将项目打包为.jar形式，[上传项目到linux服务器](https://blog.csdn.net/Sirius_hly/article/details/82590584)任意文件夹\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181103125230573.png)\n\n##### 2.编写Dockerfile\n\n```\nFROM java:8\nVOLUME /tmp\nADD spring-boot-docker.jar /app.jar\nEXPOSE 8080\nENTRYPOINT [\"java\",\"-Djava.security.egd=file:/dev/./urandom\",\"-jar\",\"/app.jar\"]\n```\n\n##### 3.编译镜像\n\n```\n# docker build -t spring-boot-docker .\n末尾的点代表文件所在目录执行,指上下文目录\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181103125556189.png)\n编译好的镜像如下:\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181103125933557.png)\n\n##### 4.安装Mysql\n&nbsp;&nbsp;创建[数据卷](https://blog.csdn.net/Sirius_hly/article/details/83590830)用来保存mysql的数据，可多个容器共享一个数据卷，当容器被删除时，数据卷不会被删除，mysql的数据依然存在。\n```\n# docker volume create mysql_data\n```\n运行mysql容器\n```\n# docker run -it --rm --name mysql -v mysql_data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=roof -p 3306:3306 -d mysql\n```\n>-v mysql_data:/var/lib/mysql\n>/var/lib/mysql是mysql容器数据存储位置\n>-e MYSQL_ROOT_PASSWORD=t\n>设置mysql密码\n\n##### 5.数据库配置\n\n1.进入mysql容器\n\n```\n# docker exec -it mysql bash\n```\n2.输入用户名密码\n\n```\nmysql -u root -p\n```\n3.设置外部网络访问mysql权限\n\n```\nALTER user \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'roof\';\n```\n\n```\nFLUSH PRIVILEGES;\n```\n4.创建数据库，添加数据\n\n```\ncreate database springboot\n\nDROP TABLE IF EXISTS `users`;\nCREATE TABLE `users` (\n  `user_id` varchar(20) NOT NULL,\n  `user_password` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `users` VALUES (\'hly\', \'123\');\n```\n##### 6.启动项目\n\n```\ndocker run --name spring-boot-docker -d -p 8080:8080 --link mysql:mysql spring-boot-docker\n```\n>-\\-link <name or id>:alias 添加链接到另一个容器；\n>name和id是源容器的name和id，alias是源容器在link下的别名。\n\n### 三.初始化Mysql数据\n&nbsp;&nbsp;为了方便部署，无需每次部署都需要运行mysql数据库，然后再进行创建表，插入数据等一些列操作，我们可以制作一个mysql镜像，初始化数据库的数据。\n##### 1.准备工作\n首先需要创建一个文件夹，添加四个文件，如下。\n+ Dockerfile\n\n```\nFROM mysql:8\n# 把数据库初始化数据文件复制到工作目录\nCOPY springboot.sql /springboot.sql\nCOPY privileges.sql /privileges.sql\n# 把要执行的shell文件放到/docker-entrypoint-initdb.d/目录下，容器会自动执行这个shell\nCOPY setup.sh /docker-entrypoint-initdb.d/setup.sh\n# 给执行文件增加可执行权限\nRUN chmod a+x /docker-entrypoint-initdb.d/setup.sh\n```\n+ springboot.sql\n\n```\ncreate database springboot;\nuse springboot;\nDROP TABLE IF EXISTS `users`;\nCREATE TABLE `users` (\n  `user_id` varchar(20) NOT NULL,\n  `user_password` varchar(100) DEFAULT NULL,\n  PRIMARY KEY (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\n\nINSERT INTO `users` VALUES (\'hly\', \'123\');\n```\n+ privileges.sql\n\n```\nuse springboot;\nALTER user \'root\'@\'%\' IDENTIFIED WITH mysql_native_password BY \'roof\';\nFLUSH PRIVILEGES;\n```\n+ setup.sh\n制作sh文件，执行sql脚本。\n```\n#!/bin/bash\nmysql -u root -p$MYSQL_ROOT_PASSWORD <<EOF\nsource springboot.sql;\nsource privileges.sql;\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181105212657705.png)\n\n##### 2.编译镜像\n\n```\n# docker build -t mysql .\n```\n##### 3.运行容器\n\n```\n# docker run -it --rm --name mysql -e MYSQL_ROOT_PASSWORD=roof -p 3306:3306 -d\n```\n\n##### 4.进入容器\n\n```\n# docker exec -it 1a6 bash\n```\n查看表，发现已经创建\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181105213404537.png)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181105213414900.png)\n\n参考资料\n>https://blog.csdn.net/leonardc/article/details/79612612\n>https://www.jianshu.com/p/21d66ca6115e', '2018-10-17 10:42:19', '20', null, '1');
INSERT INTO `article` VALUES ('75', 'hly', '我的开源项目', '### 1.项目介绍\n该项目为一个博客系统 , 目前由笔者独自开发和完善  ,  后续将会添加其他功能 , 后端技术采用的是springboot2.0 技术栈 , 将会加入 springcloud 技术栈 , 打造一个微服务系统。前端技术使用了最基础的 css , js , JQ 等 ,  可能暂时存在一些不足 。\n\n该项目目前使用 Docker 容器技术部署在了阿里云 CentOS 服务器上 , 预览地址如下:\n[天狼星博客](http://123.56.219.53/)\n[下载地址](https://github.com/huangliangyun/sirius)\n\n### 2.涉及技术\n该项目目前主要技术如下：\n\n前端：\n>Thymeleaf\n>JQuery\n>Bootstrap\n>Awesome\n>EditorMD编辑器等\n\n后端：\n>springboot2.0技术栈\n>shiro安全框架\n>mybatis\n>JPA等\n\n日志:\n>log4j2\n\n中间件:\n>maven3\n>git\n>Druid等\n\nIDE:\n>IntelliJ IDEA\n\n数据库:\n>mysql5.7\n\n部署:\n>阿里云服务器\n>CentOS7.3\n>Docker容器技术\n\n### 3.项目截图\n[天狼星博客](http://123.56.219.53/)\n\n首页\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181123103834261.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n历史页面\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181123103907596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n文章详情页\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181123104113591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n文章管理\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181123104213582.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n编写文章\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181123104244484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181123104330880.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n支持全屏编写\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181123104418465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n\n\n### 4.使用方法\n\n在笔者 [github](https://github.com/huangliangyun/sirius) 下载项目后 , 安装好maven3 , 导入数据库 , 使用 IntelliJ IDEA 打开 , 直接运行 springboot 即可。\n\n>QQ交流群：865061230\n', '2018-11-23 02:53:05', '8', null, '2');
INSERT INTO `article` VALUES ('76', 'hly', 'SpringBoot 2.0 | SpringBoot 集成 Redis + Cache + 分布式 Session', '### 简介\n#### 1.Redis\nredis是一个key-value存储系统。它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合) 和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中的，它的性能极高 ，Redis能读的速度是110000次/s，写的速度是81000次/s 。\n#### 2.Cache\nSpring Cache 是作用在方法上的，其核心思想是这样的：当我们在调用一个缓存方法时会把该方法参数和返回结果作为一个键值对存放在缓存中，等到下次利用同样的参数来调用该方法时将不再执行该方法，而是直接从缓存中获取结果进行返回。\n\n与 Redis 的区别：\n\n集群环境下，每台服务器的 Spring Cache 是不同步的，这样会出问题的，Spring Cache 只适合单机环境。Spring Cache + Redis 是设置单独的缓存服务器，所有集群服务器统一访问 Redis，不会出现缓存不同步的情况。\n\nSpring Cache + Redis  是基于注解的，对代码侵入比较小，但是支持的 api 太少了，不能满足大部分业务需求。Redis 基于 api，优点是 api 类型多，缺点是业务代码入侵。\n\n#### 3.分布式 Session\n对于微服务系统来说，每个服务都是独立的系统，我们在这个服务中创建的 Session ，和在另一个服务中创建的 Session 是两个不同的 Session ，这就难以对用户的状态进行管理，分布式 Session 是对 Session 进行统一管理，把 Session 存储到 Redis 服务器中，当用户需要访问各个不同的服务时，从 Redis 服务器中对 Session 进行校验，以访问各个不同的服务，简单来说，就是各个微服务共享一个 Session。\n\n### 环境\n#### 1. [安装 Redis](https://blog.csdn.net/Sirius_hly/article/details/80140370)\n\n#### 2.添加依赖\n\n```\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-data-redis</artifactId>\n		</dependency>\n\n		<!--分布式session共享-->\n		<dependency>\n			<groupId>org.springframework.session</groupId>\n			<artifactId>spring-session-data-redis</artifactId>\n		</dependency>\n\n		<dependency>\n			<groupId>org.springframework.boot</groupId>\n			<artifactId>spring-boot-starter-cache</artifactId>\n		</dependency>\n```\n#### 3.application.yml 配置\n\n```\nspring:\n  cache:\n      redis:\n        time-to-live: 100000 # #缓存超时时间ms @Bean配置后，这里的配置无效\n        # cache-null-values: false #是否缓存空值\n      type: redis\n\n  datasource:\n      type: com.alibaba.druid.pool.DruidDataSource\n      driver-class-name: com.mysql.jdbc.Driver\n      username: root\n      password: roof\n      url: jdbc:mysql://localhost:3306/sirius?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&autoReconnect=true\n\n  redis:\n    # Redis数据库索引，默认为0\n    database: 0\n    # Redis服务器地址\n    host: 127.0.0.1\n    # Redis服务器连接端口\n    port: 6379\n    # Redis密码，默认为空\n    password:\n    # Redis连接池最大连接数(负值表示没有限制\n    jedis:\n      pool:\n        max-active: 10\n        # 连接池最大阻塞等待时间\n        max-wait: -1\n        # 连接池最大空闲链接\n        max-idle: 10\n        # 连接池最小空闲链接\n        min-idle: 0\n    # 链接超时使劲\n    timeout: 10000\n\n    # 配置前端Thymeleaf模板引擎\n  thymeleaf:\n  # 打包末尾无/\n    prefix: classpath:/templates/\n    check-template-location: true\n    suffix: .html\n    encoding: UTF-8\n    servlet:\n      content-type: text/html\n    mode: HTML5\n    # 禁止后实现前端热部署\n    cache: false\n\n# 集成Mybatis\nmybatis:\n  # Mybatis映射\n  mapper-locations: classpath:mapper/*.xml\n  type-aliases-package: com.hly.sirius.domain\n\n# 端口设置\nserver:\n  port: 8080\n\n```\n\n#### 4.Redis + Cache 配置\n\n```\n/**\n * @author :hly\n * @github :https://github.com/huangliangyun\n * @blog :blog.csdn.net/Sirius_hly\n * @date :2018/11/26\n */\n@Configuration\n@EnableCaching\npublic class RedisConfig extends CachingConfigurerSupport {\n\n    //设置缓存的键值和参数,加上了包名和方法名，可以不配置\n    /*@Bean\n    public KeyGenerator keyGenerator() {\n        return new KeyGenerator() {\n            @Override\n            public Object generate(Object target, Method method, Object... params) {\n                StringBuilder sb = new StringBuilder();\n                sb.append(target.getClass().getName());\n                sb.append(method.getName());\n                for (Object obj : params) {\n                    sb.append(obj.toString());\n                }\n                return sb.toString();\n            }\n        };\n    }*/\n\n    //解决 Cache 存放到 Redis 数据库序列化乱码即类型无法转化问题\n    @Bean\n    CacheManager cacheManager(RedisConnectionFactory connectionFactory) {\n        //初始化一个RedisCacheWriter\n        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(connectionFactory);\n        //设置CacheManager的值序列化方式\n        ClassLoader loader = this.getClass().getClassLoader();\n        JdkSerializationRedisSerializer jdkSerializer = new JdkSerializationRedisSerializer(loader);\n        RedisSerializationContext.SerializationPair<Object> pair = RedisSerializationContext.SerializationPair.fromSerializer(jdkSerializer);\n        RedisCacheConfiguration defaultCacheConfig=RedisCacheConfiguration.defaultCacheConfig().serializeValuesWith(pair).entryTtl(Duration.ofSeconds(30));\n        //.disableCachingNullValues();//不保存空值\n        //初始化RedisCacheManager\n        RedisCacheManager cacheManager = new RedisCacheManager(redisCacheWriter, defaultCacheConfig);\n        return cacheManager;\n    }\n    //配置序列化，不然会出现 \\xAC\\xED\\x00\\x05t\\x00\\x06之类的\n    @Bean\n    public RedisTemplate<String, String> redisTemplate(RedisConnectionFactory factory) {\n        //// 配置连接工厂\n        StringRedisTemplate template = new StringRedisTemplate(factory);\n        ////使用Jackson2JsonRedisSerializer来序列化和反序列化redis的value值,效率高（默认使用JDK的序列化方式）\n        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer<>(Object.class);\n        ObjectMapper om = new ObjectMapper();\n        //// 指定要序列化的域，field,get和set,以及修饰符范围，ANY是都有包括private和public\n        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);\n        //// 指定序列化输入的类型，类必须是非final修饰的，final修饰的类，比如String,Integer等会跑出异常\n        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);\n        jackson2JsonRedisSerializer.setObjectMapper(om);\n        //使用StringRedisSerializer来序列化和反序列化redis的key值\n        template.setKeySerializer(new StringRedisSerializer());\n        //// 值采用json序列化\n        template.setValueSerializer(jackson2JsonRedisSerializer);\n        // 设置hash key 和value序列化模式\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashValueSerializer(jackson2JsonRedisSerializer);\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n```\n#### 5.配置 Session\n\n```\n@SpringBootApplication\n@EnableCaching//开启全局缓存\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 1800)//开启session共享，session有效期30分钟\npublic class SpringBootRedisApplication {\n\n	public static void main(String[] args) {\n		SpringApplication.run(SpringBootRedisApplication.class, args);\n	}\n}\n```\n### 使用\n#### 1.Redis 的使用 \n启动 Redis 数据库\n启动项目访问以下路径\nhttp://localhost:8080/redis/addUser\n```\n/**\n * @author :hly\n * @github :https://github.com/huangliangyun\n * @blog :blog.csdn.net/Sirius_hly\n * @date :2018/11/26\n */\n@RestController\npublic class RedisController {\n\n    //只针对键值对都是字符型的数据进行操作\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Autowired\n    private RedisTemplate redisTemplate;\n\n    @RequestMapping(\"redis/addUser\")\n    public User addUserByRedis(){\n        //保存对象\n        User  user = new User();\n        user.setUsername(\"hly\");\n        user.setPassword(\"123\");\n        ValueOperations<String,User> operations = redisTemplate.opsForValue();\n        operations.set(\"user\",user);\n        System.err.println(operations.get(\"user\"));\n\n        ValueOperations operations1 = stringRedisTemplate.opsForValue();\n        operations1.set(\"hly\",\"123\");\n        System.err.println(operations1.get(\"hly\"));\n        //operations.set(\"user\",user,1, TimeUnit.SECONDS);\n        return user;\n    }\n}\n```\n数据已经保存到 Redis\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181129112538929.png)\n\n#### 2.Spring Cache + Redis 的使用 \n为了方便使用，我已经把路径粘贴了出来，直接复制访问即可，每一个注解的含义也都注释写明了。\n```\n/**\n * @author :hly\n * @github :https://github.com/huangliangyun\n * @blog :blog.csdn.net/Sirius_hly\n * @date :2018/11/26\n */\n@RestController\npublic class CacheController {\n\n    /**\n     * value：缓存的名字\n     * key 使用SpEL表达式自定义的缓存Key，比如：#username是以参数username为key的缓存\n     * @return\n     */\n\n    //把集合写入redis，放进缓存\n    //http://localhost:8080/cache/addUsers\n    @GetMapping(\"/cache/addUsers\")\n    @Cacheable(value = \"user\")//读取数据到方法上，先从缓存中读取，没有再从数据库中读取\n    public List<User> postAllUser() {\n        User user1 = new User(\"hly\",\"124\");\n        User user2 = new User(\"sirius\",\"123\");\n        List<User> users = new ArrayList<User>();\n        users.add(user1);\n        users.add(user2);\n        return users;\n    }\n\n    //空方法，拿上面方法的缓存\n    //http://localhost:8080/cache/all\n    @GetMapping(\"/cache/all\")\n    @Cacheable(value = \"user\")//读取数据到方法上，先从缓存中读取，没有再从数据库中读取\n    public List<User> getAllUser() {\n        List<User> users = new ArrayList<User>();\n        return users;\n    }\n\n    //增加，修改缓存到空方法\n    //http://localhost:8080/cache/update\n    @CachePut(value = \"user\")\n    @GetMapping(\"/cache/update\")\n    public List<User> updateUsers() {\n        List<User> users = new ArrayList<User>();\n        User user1 = new User(\"hly\",\"125\");\n        users.add(user1);\n        return users;\n    }\n\n    //删除空方法设置的缓存\n    //http://localhost:8080/cache/del\n    @GetMapping(\"/cache/del\")\n    @CacheEvict(value = \"user\")\n    public String delAllCache() {\n        //删除后redis中还有\n        return \"以删除所有缓存\";\n    }\n\n    //EL表达式来指定的key，有则取出，无则放入缓存,返回到方法User返回参数，没有则设置User user\n    //http://localhost:8080/cache/object?username=hly\n    @Cacheable(value = \"user\",key=\"#user.username\")\n    @GetMapping(\"/cache/object\")\n    public User getUserOfAdd(User user) {\n        user.setUsername(\"hly\");\n        user.setPassword(\"129\");\n        return user;\n    }\n\n    //直接拿到\n    //http://localhost:8080/cache/object/get/?username=hly\n    @Cacheable(value = \"user\",key=\"#user.username\")\n    @GetMapping(\"/cache/object/get\")\n    public User getUser(User user) {\n        return user;\n    }\n\n    //根据键值，增加，修改\n    //http://localhost:8080/cache/update/object/?username=hly\n    @CachePut(value = \"user\",key=\"#user.username\")\n    @GetMapping(\"/cache/update/object\")\n    public User updateUser(User user) {\n        user.setUsername(\"hly\");\n        user.setPassword(\"128\");\n        return user;\n    }\n\n    //按名字删除缓存\n    //http://localhost:8080/cache/del/object?username=hly\n    @GetMapping(\"/cache/del/object\")\n    @CacheEvict(value = \"user\",key=\"#user.username\")\n    public String delCacheByName(User user) {\n        //删除后redis中还有\n        return \"按名字删除缓存\";\n    }\n}\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181129113427132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n#### 3.分布式 Session 的使用\n\n```\n@ResponseBody\n    @RequestMapping(\"/uuid\")\n    public String sessionTest(HttpSession session){\n        UUID uuid = (UUID)session.getAttribute(\"uuid\");\n        if(uuid == null){\n            uuid = UUID.randomUUID();\n        }\n        session.setAttribute(\"uuid\",uuid);\n        return session.getId();\n    }\n```\n\n```\n//分布式Session\n    @RequestMapping(\"/login\")\n    public String login(@RequestParam(\"username\") String username, @RequestParam(\"password\") String password, HttpSession session){\n       if(session.getAttribute(\"uuid\")!=null)\n            return \"redirect:/admin\";\n        return \"redirect:/\";\n    }\n\n```\n运行项目，访问 http://localhost:8080/uuid\n会出现 一串 id，这是 Session 的 id。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181129113901229.png)\n这个 id 会保存到 Redis 数据库 。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181129114018718.png)\n到测试页面进行测试 http://localhost:8080/\n\n在没有把这串 id 存到数据库之前是无法进行登录的，如果换个浏览器，如同换了个用户，我们必须重新获取一个 id ，才能进行验证。同理，我们可以在不同的项目进行相同的 Redis 服务器配置，启动多个项目，同一个 Session 可以访问不同的项目，尽管他们的端口号，服务器不同。\n\n\n>源码下载：https://github.com/huangliangyun/Spring-Boot-2.X\n>参考：http://www.ityouknow.com/springboot/2016/03/06/spring-boot-redis.html\n>QQ交流群：865061230\n\n', '2018-11-29 11:40:22', '1', null, '1');
INSERT INTO `article` VALUES ('77', 'hly', 'SpringBoot 2.0 | SpringBoot 整合前端框架 Vue', '### 1.简介\n[Vue](https://cn.vuejs.org/v2/guide/)与 Angular，React 是目前前端三大框架，Vue 是一套用于构建用户界面的渐进式框架。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与现代化的工具链以及各种支持类库结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。\n### 2.SpringBoot 2.0 与 Vue 的 整合\n\n#### 1.安装 Vue\n我们可以通过 [npm](https://www.cnblogs.com/goldlong/p/8027997.html) 的方式来进行安装，在安装好 npm 的前提下，我们可以通过下面方法构建一个vue 项目。\n\n```\n# 全局安装 vue-cli 脚手架\n$ cnpm install --global vue-cli\n# 创建一个基于 webpack 模板的新项目\n$ vue init webpack my-project\n# 进入项目\n$ cd my-project\n# 下载依赖\n$ npm install\n# 运行项目\n$ npm run dev\n# 打包项目\n$ npm run build\n```\n执行 $ npm run dev 后，访问 http://localhost:8080/#/ 即可进入 vue 主页。\n#### 2.vue 实现代码\n这是 vue 的主要目录，我们的代码写在该目录下\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128163427707.png?)\ncomponents 是组件，这里面编写了我们要访问的视图代码\n以 Login 为例实现登录功能\n\n```\n<template>\n  <form>\n    <input type=\"text\" v-model=\"loginForm.username\"/>\n    <input type=\"password\" v-model=\"loginForm.password\"/>\n    <input type=\"button\" @click=\"submitClick\" value=\"登录\"/>\n  </form>\n</template>\n\n<script>\n  import {postRequest} from \"../utils/api\"\n  export default {\n    data() {\n      return {\n        loginForm: {\n          username: \'hly\',\n          password: \'123\'\n        },\n      }\n    },\n    methods: {\n      submitClick: function () {\n        var _this = this;\n        postRequest(\'/login\', {\n          username: this.loginForm.username,\n          password: this.loginForm.password\n        }).then(resp => {\n          if (resp.status == 200) {\n            //成功\n            var json = resp.data;\n            if (json.status == \'success\') {\n              alert(\'登录成功\');\n              _this.$router.replace({path: \'/hello\'});\n\n            } else {\n              alert(\'账号密码错误!\');\n            }\n          } else {\n            //失败\n            alert(\'登录失败!\');\n          }\n        }, resp => {\n          alert(\'找不到服务器!\');\n        });\n      }\n    }\n  }\n</script>\n\n<style>\n\n</style>\n```\nrouter 文件里面配置了路由，通过指定的 url 访问到特定的组件\nindex.js 文件代码如下\n\n```\nimport Vue from \'vue\'\nimport Router from \'vue-router\'\nimport HelloWorld from \'@/components/HelloWorld\'\nimport Login from \'@/components/Login\'\nimport Test from \'@/components/Test\'\n\nVue.use(Router)\n\nexport default new Router({\n  routes: [\n    {\n      path: \'/hello\',\n      name: \'HelloWorld\',\n      component: HelloWorld\n    }, {\n      path: \'/\',\n      name: \'Login\',\n      component: Login\n    },  {\n      path: \'/test\',\n      name: \'Test\',\n      component: Test\n    }\n  ]\n})\n```\n在utils 里面，我们定义了不同类型的请求发送数据给后端的 API \n\n```\n/**\n *@author :hly\n *@gkhub :https://gkhub.com/huangliangyun\n @blog :blog.csdn.net/Sirius_hly\n *@date :2018/11/24\n */\n\nimport axios from \'axios\'\n\nlet base = \'\'\nexport const postRequest = (url, params) => {\n  return axios({\n    method: \'post\',\n    url: `${base}${url}`,\n    data: params,\n    transformRequest: [function (data) {\n      // Do whatever you want to transform the data\n      let newData= \'\'\n      for (let k in data) {\n        newData+= encodeURIComponent(k) + \'=\' + encodeURIComponent(data[k]) + \'&\'\n      }\n      return newData\n    }],\n    headers: {\n      \'Content-Type\': \'application/x-www-form-urlencoded\'\n    }\n  })\n}\n\n```\n自此，我们与 SpringBoot 后端交互的代码就已经基本实现了，vue 和 SpringBoot 是两个项目，他们配置了不同的端口，如果要如果要间接访问，我们还需要进行跨域的配置。\n\n找到 vue 项目下 config 的 index.js 文件\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128164325828.png)\n修改proxyTable，target 是 SpringBoot 的 地址和端口\n```\n//跨域\n    proxyTable: {\n      //别名\n      \'/\': {\n        target: \'http://localhost:8081\',\n        changeOrigin: true,\n        pathRewrite: {\n          \'^/\': \'\'\n        }\n      }\n    },\n```\n完成后启动项目。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128164510813.png)\n\n#### 3.SpringBoot 实现代码\n关键代码如下，接收 vue 端发送过来的数据，根据查询的结构，以 json 的形式返回 vue 端。\n\n```\n@Controller\npublic class UserController {\n\n    @Autowired\n    UserDao userDao;\n    @RequestMapping(value = \"/login\",method = RequestMethod.POST)\n    public ResultBean login(@RequestParam(value=\"username\",required=false)String username,@RequestParam(value=\"password\",required=false)String password , HttpServletResponse response) throws IOException {\n        System.err.println(username+\": \"+password);\n        if(password.equals(userDao.selectUserByUsername(username).getPassword())) {\n            response.setContentType(\"application/json;charset=utf-8\");\n            PrintWriter out = response.getWriter();\n            out.write(\"{\\\"status\\\":\\\"success\\\",\\\"msg\\\":\\\"登录成功\\\"}\");\n            out.flush();\n            out.close();\n\n        }else {\n            response.setContentType(\"application/json;charset=utf-8\");\n            PrintWriter out = response.getWriter();\n            out.write(\"{\\\"status\\\":\\\"error\\\",\\\"msg\\\":\\\"登录失败\\\"}\");\n            out.flush();\n            out.close();\n        }\n        return  null;\n    }\n}\n\n```\n#### 4.SpringBoot 与 Vue 的集成\n我们通过执行 $ npm run build 命令，打包 vue 项目，会生成一个 dist 文件，我们把这个文件直接复制到 SpringBoot 项目的 static 下，只启动 SpringBoot 项目 ，访问 http://localhost:8081/index.html#/ 就能看到我们的 vue 页面。\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128165308575.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128165521920.png)\n\n>源码下载：https://github.com/huangliangyun/Spring-Boot-2.X\n>QQ交流群：865061230\n', '2018-11-29 11:40:57', '2', null, '1');
INSERT INTO `article` VALUES ('78', 'hly', 'SpringBoot 2.0 | Security+Mybatis 权限认证', '### 1.简介\nSpring Security 是 Spring 家族的一个安全框架, 提供了全面的安全解决方案 , 对用户的身份进行认证, 以及验证每一个用户所具有的的权限, 根据用户的权限限制用户的操作。\n\nMybatis 是一款优秀的持久层框架 , 支持自定义 SQL 以及各种高级映射 , 与 JPA 的自动生成 SQL 相比, 它更加灵活, 本例使用 Mybatis 存储用户的身份和权限, 通过 Security 获取用户信息, 对用户的权限和操作进行管理。\n### 2.实现代码\n\n#### 1.项目配置\n\n```\nspring:\n  datasource:\n      type: com.alibaba.druid.pool.DruidDataSource\n      driver-class-name: com.mysql.jdbc.Driver\n      username: root\n      password: roof\n      url: jdbc:mysql://localhost:3306/security?useSSL=false&useUnicode=true&characterEncoding=utf-8&zeroDateTimeBehavior=convertToNull&autoReconnect=true\n\n    # 配置前端Thymeleaf模板引擎\n  thymeleaf:\n  # 打包末尾无/\n    prefix: classpath:/templates/\n    check-template-location: true\n    suffix: .html\n    encoding: UTF-8\n    servlet:\n      content-type: text/html\n    mode: HTML5\n    # 禁止后实现前端热部署\n    cache: false\n\n# 集成Mybatis\nmybatis:\n  # Mybatis映射\n  mapper-locations: classpath:mapper/*.xml\n  type-aliases-package: com.hly.springBootSecurityMybatis.entity\n\n# 端口设置\nserver:\n  port: 8081\n\n```\n#### 2.Security 配置\n\n```\n@Configuration\n@EnableWebSecurity//开启WebSecurity功能\n@EnableGlobalMethodSecurity(prePostEnabled = true)//开启方法上的保护\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n   @Bean\n   UserDetailsService userService(){\n       return  new UserService();\n   }\n\n    @Autowired\n    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n\n        //从数据库中获取用户认证信息\n        auth.userDetailsService(userService());\n    }\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests()\n                //不需要验证的资源\n                .antMatchers(\"/css/**\", \"/index\").permitAll()\n                //需要验证，角色为Role\n                .antMatchers(\"/article/**\").hasAnyRole(\"ADMIN\",\"STUDENT\",\"TEACHER\")\n                .antMatchers(\"/admin/**\").hasAnyRole(\"ADMIN\",\"STUDENT\",\"TEACHER\")\n                .and()\n                //表单的登录地址和失败地址\n                .formLogin().loginPage(\"/login\").failureForwardUrl(\"/loginError\")\n                .and()\n                //异常处理界面\n                .exceptionHandling().accessDeniedPage(\"/401\");\n        http.logout().logoutSuccessUrl(\"/\");\n    }\n}\n```\n#### 3.controller 层\n\n```\n@Controller\npublic class ArticleController {\n\n    @Autowired\n    ArticleService articleService;\n    /**\n     * 查看文章列表\n     * @param model\n     * @return\n     */\n    @RequestMapping(\"/article\")\n    public ModelAndView articleList(Model model){\n        List<Article> list = articleService.getArticles();\n        model.addAttribute(\"articlesList\",list);\n        return new ModelAndView(\"article/list\",\"articleModel\",model);\n    }\n    /**\n     * 给方法设置权限,没有ADMIN权限的用户不能删除文章\n     * @param id\n     * @param model\n     * @return\n     */\n    @PreAuthorize(\"hasAnyAuthority(\'ROLE_ADMIN\')\")\n    @GetMapping(value = \"/article/{id}/deletion\")\n    public ModelAndView delete(@PathVariable(\"id\")int id,Model model){\n        articleService.deleteArticle(id);\n        model.addAttribute(\"articlesList\",articleService.getArticles());\n        return new ModelAndView(\"article/list\",\"articleModel\",model);\n    }\n}\n```\n\n```\n@Controller\npublic class LoginController {\n\n    @RequestMapping(\"/\")\n    public String root(){\n        return \"redirect:/index\";\n    }\n\n    @RequestMapping(\"index\")\n    public String index(){\n        return \"index\";\n    }\n\n    //@RequestMapping将接收Get,Post,Head,Options等所有的请求方式\n    @RequestMapping(value = \"/login\")\n    public String login(){\n        return \"login\";\n    }\n\n    @RequestMapping(\"/loginError\")\n    public String loginError(ModelAndView modelAndView){\n        modelAndView.addObject(\"loginError\",true);\n        return \"login\";\n    }\n\n    @RequestMapping(\"/admin\")\n    public String admin(){\n        return \"admin/admin\";\n    }\n\n    //@RequestMapping(method = RequestMethod.GET)的缩写\n    @GetMapping(\"401\")\n    public String error(){\n        return \"401\";\n    }\n    \n    @GetMapping(\"/logout\")\n    public String logout(){\n        return \"/\";\n    }\n}\n```\n#### 4.dao 层\n\n```\n@Repository\npublic interface UserDao {\n\n    //通过用户名查询用户\n    public User findUserByUsername(String username);\n}\n```\n#### 5. entity\nArticle\n```\npublic class Article {\n    private int id;\n    private String title;\n    private String content;\n    \n    public Article() {\n    }\n\n    public Article(int id, String title, String content) {\n        this.id = id;\n        this.title = title;\n        this.content = content;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n    @Override\n    public String toString() {\n        return \"Article{\" +\n                \"id=\" + id +\n                \", title=\'\" + title + \'\\\'\' +\n                \", content=\'\" + content + \'\\\'\' +\n                \'}\';\n    }\n}\n```\nRole\n```\npublic class Role implements GrantedAuthority {\n\n    private int id;\n    private String name;\n\n    @Override\n    public String getAuthority() {\n        return name;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n    \n    public void setName(String name) {\n        this.name = name;\n    }\n\n    @Override\n    public String toString() {\n        return name;\n    }\n}\n```\nUser\n```\npublic class User implements UserDetails, Serializable {\n\n    private int id;\n    private String username;\n    private String password;\n    private List<Role> roles;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return roles;\n    }\n\n    @Override\n    public String getPassword() {\n        return password;\n    }\n\n    @Override\n    public String getUsername() {\n        return username;\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n```\n#### 6.service层\n\n```\n@Service\npublic class ArticleServiceImpl implements ArticleService {\n\n    private List<Article> list = new ArrayList<>();\n\n    public ArticleServiceImpl() {\n        list.add(new Article(1,\"java\",\"java从入门到搬砖\"));\n        list.add(new Article(2,\"SQL\",\"SQL从删库到跑路\"));\n       \n    }\n    @Override\n    public List<Article> getArticles() {\n        return list;\n    }\n    @Override\n    public void deleteArticle(int id) {\n        Iterator iter = list.iterator();\n        while(iter.hasNext()){\n            Article article = (Article)iter.next();\n            if(article.getId()==id){\n                iter.remove();\n            }\n        }\n    }\n}\n```\n\n```\npublic interface ArticleService {\n    List<Article> getArticles();\n    void deleteArticle(int id);\n}\n\n```\n\n```\n@Service\npublic class UserService implements UserDetailsService {\n    @Autowired\n    private UserDao userDao;\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        System.err.println(userDao.findUserByUsername(username));\n        return userDao.findUserByUsername(username);\n    }\n}\n```\n#### 7.mapper\n\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" >\n<mapper namespace=\"com.hly.springBootSecurityMybatis.dao.UserDao\">\n\n    <resultMap id=\"userMap\" type=\"User\">\n        <id property=\"id\" column=\"id\"/>\n        <result property=\"username\" column=\"username\"/>\n        <result property=\"password\" column=\"password\"/>\n        <collection property=\"roles\" ofType=\"Role\">\n            <result property=\"name\" column=\"name\"/>\n        </collection>\n    </resultMap>\n\n    <select id=\"findUserByUsername\" parameterType=\"string\" resultMap=\"userMap\">\n        SELECT u.*,r.name FROM user u\n        LEFT JOIN user_role ur ON u.id = ur.user_id\n        LEFT JOIN role r ON ur.role_id = r.id\n        WHERE username = #{username}\n    </select>\n    \n</mapper>\n```\n#### 8.前端页面\nadmin.html\n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<h3>拥有权限才能访问该页面</h3>\n<p><a href=\"../../templates/article/list.html\" th:href=\"@{/article}\" >管理文章</a></p>\n<p><a href=\"../../templates/index.html\" th:href=\"@{/index}\" >返回首页</a></p>\n<div th:substituteby=\"index::user\"></div>\n</body>\n</html>\n```\nlist.html\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/xhtml\"\n      xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>list</title>\n</head>\n<body>\n<h3>文章管理，ADMIN角色才能删除</h3>\n<table>\n    <tr>\n        <td><b>文章编号</b></td>\n        <td><b>文章标题</b></td>\n        <td><b>文章内容</b></td>\n    </tr>\n    <tr th:each=\"article:${articlesList}\">\n        <td th:text=\"${article.id}\"></td>\n        <td th:text=\"${article.title}\"></td>\n        <td th:text=\"${article.content}\"></td>\n        <td><a href=\"\" th:href=\"@{\'/article/\'+${article.id}+\'/deletion\'}\">删除</a></td>\n    </tr>\n</table>\n<div th:substituteby=\"index::user\"></div>\n</body>\n</html>\n```\nindex.html\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<h3>首页任何角色都能访问</h3>\n<p><a href=\"../templates/admin/admin.html\" th:href=\"@{/admin}\">查看被保护界面: /admin</a></p>\n\n<div th:fragment=\"user\" sec:authorize=\"isAuthenticated()\">\n    登录用户：<span sec:authentication=\"name\"></span>\n    用户角色：<span sec:authentication=\"principal.authorities\"></span>\n    <div>\n        <form th:action=\"@{/logout}\" method=\"post\">\n            <input type=\"submit\" value=\"退出\">\n        </form>\n    </div>\n</div>\n\n</body>\n</html>\n```\nlogin.html\n\n```\n<!DOCTYPE html>\n<html lang=\"en\" xmlns:th=\"http://www.thymeleaf.org\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:sec=\"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Title</title>\n</head>\n<body>\n<h2>登录页面</h2>\n<p th:if=\"${loginError}\">用户名或密码错误</p>\n<form th:action=\"@{/login}\" method=\"post\">\n    <label for=\"username\">用户名</label>\n    <input type=\"text\" id=\"username\" name=\"username\" autofocus=\"autofocus\" autocomplete=\"new-text\">\n    <label for=\"password\">密码</label>\n    <input type=\"password\" id=\"password\" name=\"password\" autocomplete=\"new-password\">\n    <input type=\"submit\" value=\"login\">\n    <p><a href=\"/index\" th:href=\"@{/index}\">返回首页</a></p>\n\n</form>\n\n</body>\n</html>\n```\n#### 9.数据库如下\n\n```\n/*\nSET FOREIGN_KEY_CHECKS=0;\n-- ----------------------------\n-- Table structure for `role`\n-- ----------------------------\nDROP TABLE IF EXISTS `role`;\nCREATE TABLE `role` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of role\n-- ----------------------------\nINSERT INTO `role` VALUES (\'1\', \'ROLE_ADMIN\');\nINSERT INTO `role` VALUES (\'2\', \'ROLE_TEACHER\');\nINSERT INTO `role` VALUES (\'3\', \'ROLE_STUDENT\');\nINSERT INTO `role` VALUES (\'4\', \'ROLE_COUNSELOR\');\n\n-- ----------------------------\n-- Table structure for `user`\n-- ----------------------------\nDROP TABLE IF EXISTS `user`;\nCREATE TABLE `user` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `username` varchar(255) NOT NULL,\n  `password` varchar(255) DEFAULT NULL,\n  PRIMARY KEY (`id`),\n  UNIQUE KEY `UK_USERNAME` (`username`)\n) ENGINE=MyISAM AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of user\n-- ----------------------------\nINSERT INTO `user` VALUES (\'1\', \'admin\', \'$2a$10$NmtmORbN/ATToou17gvjl.CUu1yTNxxRjsO2GOJUbJFsWd21pYmFi\');\nINSERT INTO `user` VALUES (\'2\', \'js\', \'$2a$10$NmtmORbN/ATToou17gvjl.CUu1yTNxxRjsO2GOJUbJFsWd21pYmFi\');\nINSERT INTO `user` VALUES (\'3\', \'xs\', \'$2a$10$NmtmORbN/ATToou17gvjl.CUu1yTNxxRjsO2GOJUbJFsWd21pYmFi\');\nINSERT INTO `user` VALUES (\'4\', \'fdy\', \'$2a$10$NmtmORbN/ATToou17gvjl.CUu1yTNxxRjsO2GOJUbJFsWd21pYmFi\');\n\n-- ----------------------------\n-- Table structure for `user_role`\n-- ----------------------------\nDROP TABLE IF EXISTS `user_role`;\nCREATE TABLE `user_role` (\n  `user_id` int(11) NOT NULL,\n  `role_id` int(11) NOT NULL,\n  KEY `FKuser_id` (`role_id`),\n  KEY `FKrole_id` (`user_id`)\n) ENGINE=MyISAM DEFAULT CHARSET=utf8;\n\n-- ----------------------------\n-- Records of user_role\n-- ----------------------------\nINSERT INTO `user_role` VALUES (\'1\', \'1\');\nINSERT INTO `user_role` VALUES (\'2\', \'2\');\nINSERT INTO `user_role` VALUES (\'3\', \'3\');\nINSERT INTO `user_role` VALUES (\'4\', \'4\');\n\n```\n\n#### 10.整个项目结构\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128152319179.png)\n\n### 3.测试结果\n我们在 security 里配置了 Index 页面不需要验证即可访问,访问\nhttp://localhost:8081/index\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128153014812.png)\n\n在没有登录之前,通过浏览器访问其他任何页面,都会跳转到登录界面。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128153110545.png)\n登录之后即可进入管理页面,这里的加密密码都是123,账号请看数据库。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128153156209.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n在管理文章里面,我们在 controller 层配置了只有 ADMIN 用户才能删除,其他用户如果点击删除将会提示没有权限。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181128153423191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n\n>源代码：<https://github.com/huangliangyun/Spring-Boot-2.X>\n>QQ交流群：865061230\n>参考<<深入理解SpringCloud微服务构建>>', '2018-11-29 11:41:27', '3', null, '1');
INSERT INTO `article` VALUES ('79', 'hly', 'JavaWeb 实现基础增删改查 CRUD', '#### 1.数据库表如下\n\n```\nCREATE TABLE `employee` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `name` varchar(40) NOT NULL,\n  `note` varchar(200) DEFAULT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;\n```\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181129221125139.png)\n\n#### 2.项目的目录结构\n5 个后端文件和 1 个前端文件。\ncontroller 控制层，对业务逻辑的处理，响应给前端页面。\ndao 数据接口层\nentity 实体\nimpl 数据接口的实现，CRUD 语句\nmain.jsp 前端代码\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/2018112922014955.png)\n\n简单前端页面，完整后端功能。\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20181129220954254.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1Npcml1c19obHk=,size_16,color_FFFFFF,t_70)\n#### 3.完整代码\n实体类 Employee\n\n```\n/**\n * @author :hly\n * @github :https://github.com/huangliangyun\n * @blog :blog.csdn.net/Sirius_hly\n * @date :2018/11/29\n */\npublic class Employee {\n    private int id;\n    private String name;\n    private String note;\n\n    public Employee() {\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public void setId(int id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getNote() {\n        return note;\n    }\n\n    public void setNote(String note) {\n        this.note = note;\n    }\n\n    @Override\n    public String toString() {\n        return \"Employee{\" +\n                \"id=\" + id +\n                \", name=\'\" + name + \'\\\'\' +\n                \", note=\'\" + note + \'\\\'\' +\n                \'}\';\n    }\n}\n\n```\n数据库连接类 DBConnection\n\n```\npackage com.hly.jsp.javaWeb.dao;\n\nimport java.sql.*;\n\n/**\n * @author :hly\n * @github :https://github.com/huangliangyun\n * @blog :blog.csdn.net/Sirius_hly\n * @date :2018/10/31\n */\npublic class DBConnection {\n\n    private static final String driverName = \"com.mysql.jdbc.Driver\";\n    private static final String url = \"jdbc:mysql://localhost:3306/testDB?useUnicode=true&characterEncoding=UTF-8\";\n    private static final String user = \"root\";\n    private static final String password = \"roof\";\n    private static Connection connection = null;\n\n    /*static {\n        try {\n            Class.forName(driverName);\n        } catch (ClassNotFoundException e) {\n            System.out.println(\"连接失败\"+e.getMessage());\n        }\n    }\n*/\n    public static Connection getConnection() throws SQLException {\n        try {\n            Class.forName(driverName);\n            connection = DriverManager.getConnection(url, user, password);;\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n        return connection;\n    }\n\n    public static void close(ResultSet rs, Statement st, Connection conn) {\n        try {\n            if (rs != null) {\n                rs.close();\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (st != null) {\n                    st.close();\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            } finally {\n                if (conn != null) {\n                    try {\n                        conn.close();\n                    } catch (SQLException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n\n```\nEmployeeDao 数据接口层\n```\npackage com.hly.jsp.javaWeb.dao;\nimport com.hly.jsp.javaWeb.entity.Employee;\nimport java.util.List;\n\n/**\n * @author :hly\n * @github :https://github.com/huangliangyun\n * @blog :blog.csdn.net/Sirius_hly\n * @date :2018/11/29\n */\npublic interface EmployeeDao {\n    //C\n    public int add(Employee employee);\n    //R\n    public List<Employee> selectAll();\n    public List<Employee> query(String name);\n    //U\n    public int  update(Employee employee);\n    //D\n    public int delete (int id);\n\n}\n\n```\ndao 层实现类 EmployeeDaoImpl，SQL 语句的实现\n\n```\npackage com.hly.jsp.javaWeb.impl;\nimport com.hly.jsp.javaWeb.dao.DBConnection;\nimport com.hly.jsp.javaWeb.dao.EmployeeDao;\nimport com.hly.jsp.javaWeb.entity.Employee;\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * @author :hly\n * @github :https://github.com/huangliangyun\n * @blog :blog.csdn.net/Sirius_hly\n * @date :2018/11/29\n */\npublic class EmployeeDaoImpl implements EmployeeDao {\n\n    //增\n    @Override\n    public int add(Employee employee) {\n\n        try {\n            Connection con = DBConnection.getConnection();\n            String sql = \"insert into employee(name,note) values(?,?)\";\n            PreparedStatement ps = con.prepareStatement(sql);\n            ps.setString(1, employee.getName());\n            ps.setString(2, employee.getNote());\n            ps.executeUpdate();\n            DBConnection.close(null,ps,con);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return 1;\n    }\n\n    //查全部\n    @Override\n    public List<Employee> selectAll() {\n\n        List<Employee> list = new ArrayList<>();\n        Employee employee = null;\n        try {\n            Connection con = DBConnection.getConnection();\n            String sql = \"select id,name,note from employee\";\n            PreparedStatement ps = con.prepareStatement(sql);\n            ResultSet rs = ps.executeQuery();\n            while (rs.next()){\n                employee = new Employee();\n                employee.setId(rs.getInt(1));\n                employee.setName(rs.getString(2));\n                employee.setNote(rs.getString(3));\n                list.add(employee);\n            }\n            DBConnection.close(rs,ps,con);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return list;\n    }\n\n    //根据 id 查\n    @Override\n    public List<Employee> query(String name) {\n\n        Employee employee = null;\n        List<Employee> list = new ArrayList<>();\n\n        try {\n            Connection con = DBConnection.getConnection();\n            String sql = \"select id,name,note from employee where name like ?\";\n            PreparedStatement ps = con.prepareStatement(sql);\n            //模糊查询\n            ps.setString(1,\"%\"+name+\"%\");\n            ResultSet rs = ps.executeQuery();\n            while (rs.next()){\n                employee = new Employee();\n                employee.setId(rs.getInt(1));\n                employee.setName(rs.getString(2));\n                employee.setNote(rs.getString(3));\n                list.add(employee);\n            }\n            DBConnection.close(rs,ps,con);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return list;\n    }\n\n    //更新\n    @Override\n    public int update(Employee employee) {\n\n        try {\n            Connection con = DBConnection.getConnection();\n            String sql = \"update employee set name = ?,note = ? where id = ?\";\n            PreparedStatement ps = con.prepareStatement(sql);\n            ps.setString(1,employee.getName());\n            ps.setString(2,employee.getNote());\n            ps.setInt(3,employee.getId());\n            ps.executeUpdate();\n            DBConnection.close(null,ps,con);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return 1;\n    }\n\n    //删除\n    @Override\n    public int delete(int id) {\n        try {\n            Connection con = DBConnection.getConnection();\n            String sql = \"delete from employee where id = ?\";\n            PreparedStatement ps = con.prepareStatement(sql);\n            ps.setInt(1,id);\n            ps.executeUpdate();\n            DBConnection.close(null,ps,con);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n        return 1;\n    }\n}\n\n```\n控制层 Servlet\n\nEmployeeServlet\n```\npackage com.hly.jsp.javaWeb.controller;\n\nimport com.hly.jsp.javaWeb.dao.EmployeeDao;\nimport com.hly.jsp.javaWeb.entity.Employee;\nimport com.hly.jsp.javaWeb.impl.EmployeeDaoImpl;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.annotation.WebServlet;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.lang.reflect.Method;\nimport java.util.List;\n/**\n * @author :hly\n * @github :https://github.com/huangliangyun\n * @blog :blog.csdn.net/Sirius_hly\n * @date :2018/11/28\n */\n\n@WebServlet(urlPatterns = { \"*.do\" })\npublic class EmployeeServlet extends HttpServlet {\n\n    public void doPost(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n        doGet(request, response);\n    }\n\n    public void doGet(HttpServletRequest request, HttpServletResponse response) {\n        response.setContentType(\"text/html;charset=utf-8\");\n        String url = request.getRequestURI();\n        String methodName = url.substring(url.lastIndexOf(\"/\")+1, url.lastIndexOf(\".\"));\n        Method method = null;\n        try {\n            // 使用反射机制获取在本类中声明了的方法\n            method = getClass().getDeclaredMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);\n            // 执行方法\n            method.invoke(this, request, response);\n        } catch (Exception e) {\n            throw new RuntimeException(\"调用方法出错\");\n        }\n    }\n\n    //增加\n    public void addEmp(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        Employee employee = new Employee();\n        employee.setName(request.getParameter(\"addName\"));\n        employee.setNote(request.getParameter(\"addNote\"));\n        EmployeeDao employeeDao = new EmployeeDaoImpl();\n        employeeDao.add(employee);\n        selectAllEmp(request,response);\n    }\n\n    //查找全部\n    public void selectAllEmp(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        EmployeeDao employeeDao = new EmployeeDaoImpl();\n        List<Employee> list = employeeDao.selectAll();\n        request.setAttribute(\"list\", list);\n        request.getRequestDispatcher(\"/javaWeb/manage/main.jsp\").forward(request, response);\n    }\n\n    //模糊查询\n    public void selectByEmpName(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String name = request.getParameter(\"selectName\");\n        EmployeeDao employeeDao = new EmployeeDaoImpl();\n        List<Employee> list = employeeDao.query(name);\n        System.err.println(\"list：\"+list);\n        request.setAttribute(\"list\", list);\n        request.getRequestDispatcher(\"/javaWeb/manage/main.jsp\").forward(request, response);\n    }\n\n    //更新数据\n    public void updateEmp(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        Employee employee = new Employee();\n        employee.setId(Integer.parseInt(request.getParameter(\"updateId\")));\n        employee.setName(request.getParameter(\"updateName\"));\n        employee.setNote(request.getParameter(\"updateNote\"));\n        System.err.println(employee);\n        EmployeeDao employeeDao = new EmployeeDaoImpl();\n        employeeDao.update(employee);\n        selectAllEmp(request,response);\n    }\n\n    //删除\n    public void deleteEmp(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String deleteId = request.getParameter(\"deleteId\");\n        EmployeeDao employeeDao = new EmployeeDaoImpl();\n        employeeDao.delete(Integer.parseInt(deleteId));\n        selectAllEmp(request,response);\n    }\n}\n\n```\n前端代码 main.js\n\n```\n<%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %>\n<%@ taglib prefix=\"c\" uri=\"http://java.sun.com/jsp/jstl/core\" %>\n<html>\n<head>\n    <title>main</title>\n    <style>\n        a, a:focus {\n            text-decoration: none;\n        }\n    </style>\n</head>\n<body>\n\n<a href=\"selectAllEmp.do\">点击查询所有用户信息</a><br/>\n\n<form action=\"selectByEmpName.do\">\n    <input type=\"text\" name=\"selectName\" placeholder=\"请输入名字\">\n    <input type=\"submit\" value=\"模糊查询\">\n</form>\n\n<form action=\"addEmp.do\">\n    <input type=\"text\" name=\"addName\" placeholder=\"请输入姓名\">\n    <input type=\"text\" name=\"addNote\" placeholder=\"请输入Note\">\n    <input type=\"submit\" value=\"添加\">\n</form>\n\n<form action=\"updateEmp.do\">\n    <input type=\"text\" placeholder=\"需要修改的id\"name=\"updateId\" >\n    <input type=\"text\" placeholder=\"需要修改的name\" name=\"updateName\">\n    <input type=\"text\" placeholder=\"需要修改的note\" name=\"updateNote\">\n    <input type=\"submit\" value=\"修改\">\n</form>\n\n<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\" width=\"400\">\n    <tr>\n        <th>id</th>\n        <th>name</th>\n        <th>note</th>\n        <th>delete</th>\n    </tr>\n    <c:forEach var=\"e\" items=\"${list}\">\n        <tr>\n\n            <td>${e.id}</td>\n            <td>${e.name}</td>\n            <td>${e.note}</td>\n            <td><a href=\"deleteEmp.do?deleteId=${e.id}\">删除</a></td>\n        </tr>\n    </c:forEach>\n</table>\n\n<script type=\"javascript\">\n\n</script>\n</body>\n</html>\n```\n>代码下载：https://download.csdn.net/download/sirius_hly/10817983\n\n\n\n\n\n\n\n\n\n\n\n\n', '2018-11-29 02:21:06', '22', null, '1');
INSERT INTO `article` VALUES ('80', 'hly', 'Docker $ 第一篇 ：Docker 入门', '### 1.Docker简介\n\nDocker 是一个开源的应用容器引擎，基于 Go语言 并遵从Apache2.0协议开源。Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。\n\nDocker 让开发者可以打包他们的应用以及依赖包到一个可移植的容器中，然后发布到任何流行的 Linux 机器上，便可以实现虚拟化。Docker改变了虚拟化的方式，使开发者可以直接将自己的成果放入Docker中进行管理。方便快捷已经是 Docker的最大优势，过去需要用数天乃至数周的 任务，在Docker容器的处理下，只需要数秒就能完成。、\n\n### 2.安装Docker\nDocker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。\n\n查看内核版本\n\n```shell\n $ uname -r \n```\n\n安装命令\n```\n$ sudo yum update\n$ yum -y install docker\n```\n\n启动Docker\n```\n$ systemctl start docker\n$ systemctl enable docker.service //设为开机启动\n```\n\n查看版本\n```\n$ docker version\n$ docker info//查看基本信息\n```\n\n\n查看docker信息\n```\n$ docker info\n```\n设置镜像\n\n由于国外的镜像下载速度很慢，我们可以用国内的镜像\n```\n$ vi /etc/docker/daemon.json\n```\n\n添加\n```\n{\n    \"registry-mirrors\": [\"https://registry.docker-cn.com\"],\n    \"live-restore\": true\n}\n```\n\n按esc->:wq保存退出。\n\n### 3.Docker命令\n\n拉取docker镜像\n\nDocker image：镜像是只读的，镜像中包含有需要运行的文件。镜像用来创建container，一个镜像可以运行多个container；镜像可以通过Dockerfile创建，也可以从Docker hub/registry上下载。\n\nDocker container：容器是Docker的运行组件，启动一个镜像就是一个容器，容器是一个隔离环境，多个容器之间不会相互影响，保证容器中的程序运行在一个相对安全的环境中。\n```\n$ docker pull imageName//imageName是需要拉取的文件名\n```\n拉取helloword镜像，library为默认的仓库\n\n```\n$ docker pull library/hello-world\n```\n\n\n查询删除镜像\n\nimage 文件是通用的，一台机器的 image 文件拷贝到另一台机器，照样可以使用。一般来说，为了节省时间，我们应该尽量使用别人制作好的 image 文件，而不是自己制作。即使要定制，也应该基于别人的 image 文件进行加工，而不是从零开始制作。\n\n查询镜像\n\n```\n$ docker images\n```\n\n删除镜像\n\n可根据id删除，取前三位以上即可，不需要完整id。\n```\n$ docker image rm [imageName]\n```\n运行镜像文件\n\n```\n$ docker run hello-world\n\n$ -d: 后台运行容器，并返回容器ID；\n$ --name=\"nginx-lb\": 为容器指定一个名称，可根据名称删除；\n\n$ docker run -d --name hello-world1  hello-world\n```\n\n查看容器\n\n```\n$ docker ps//查看当前哪些容器在运行\n$ docker ps -a//查看所有容器\n```\n\n启动，停止，重启容器\n```\n$ docker start container_name/container_id\n$ docker stop container_name/container_id\n$ docker restart container_name/container_id\n```\n\n进入容器\n\n方法一：\n```\n$ docker attach container_name/container_id\n```\n\n方法二：\n```\n$  docker exec -it containerName/containerId bash\n```\n\n退出容器\n\n一.退出不关闭容器:\n\nCtrl+P+Q\n\n二.退出关闭容器：\n\n# exit\n\n删除容器\n```\n$ docker rm container_name/container_id\n```\n原文：https://blog.csdn.net/Sirius_hly/article/details/83007542\n\n参考：https://blog.csdn.net/ityouknow/article/details/79465906\n\n', '2018-11-30 01:14:12', '6', null, '1');
INSERT INTO `article` VALUES ('100', 'hly', 'ABOUT ME', 'ABOUT ME\n\n### 联系我\n\n+ [github](https://github.com/huangliangyun)\n+ [CSDN 博客](https://blog.csdn.net/Sirius_hly)\n+ QQ : 1136513099\n\n如果有任何建议，欢迎加我 QQ 。\n\nEND', '2018-11-30 07:39:30', '0', null, '1');

-- ----------------------------
-- Table structure for `article_category`
-- ----------------------------
DROP TABLE IF EXISTS `article_category`;
CREATE TABLE `article_category` (
  `articleId` int(11) NOT NULL,
  `categoryId` int(11) NOT NULL,
  PRIMARY KEY (`articleId`,`categoryId`),
  KEY `FK_CATEGORYID` (`categoryId`),
  CONSTRAINT `FK_ARTICLEID` FOREIGN KEY (`articleId`) REFERENCES `article` (`articleId`),
  CONSTRAINT `FK_CATEGORYID` FOREIGN KEY (`categoryId`) REFERENCES `category` (`categoryId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of article_category
-- ----------------------------
INSERT INTO `article_category` VALUES ('75', '1');
INSERT INTO `article_category` VALUES ('75', '2');
INSERT INTO `article_category` VALUES ('19', '3');
INSERT INTO `article_category` VALUES ('75', '3');
INSERT INTO `article_category` VALUES ('76', '3');
INSERT INTO `article_category` VALUES ('77', '3');
INSERT INTO `article_category` VALUES ('78', '3');
INSERT INTO `article_category` VALUES ('4', '6');
INSERT INTO `article_category` VALUES ('5', '6');
INSERT INTO `article_category` VALUES ('6', '6');
INSERT INTO `article_category` VALUES ('7', '6');
INSERT INTO `article_category` VALUES ('8', '6');
INSERT INTO `article_category` VALUES ('9', '6');
INSERT INTO `article_category` VALUES ('11', '6');
INSERT INTO `article_category` VALUES ('12', '6');
INSERT INTO `article_category` VALUES ('19', '6');
INSERT INTO `article_category` VALUES ('75', '6');
INSERT INTO `article_category` VALUES ('80', '6');
INSERT INTO `article_category` VALUES ('75', '31');
INSERT INTO `article_category` VALUES ('79', '32');

-- ----------------------------
-- Table structure for `category`
-- ----------------------------
DROP TABLE IF EXISTS `category`;
CREATE TABLE `category` (
  `categoryId` int(11) NOT NULL AUTO_INCREMENT,
  `categoryName` varchar(100) NOT NULL,
  `categoryOrder` int(11) DEFAULT NULL,
  `categoryArticleNum` int(11) DEFAULT '0',
  PRIMARY KEY (`categoryId`),
  UNIQUE KEY `categoryName` (`categoryName`)
) ENGINE=InnoDB AUTO_INCREMENT=33 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of category
-- ----------------------------
INSERT INTO `category` VALUES ('1', '微服务架构', null, '1');
INSERT INTO `category` VALUES ('2', 'SpringCloud', null, '1');
INSERT INTO `category` VALUES ('3', 'SpringBoot', null, '4');
INSERT INTO `category` VALUES ('4', 'Java', null, '0');
INSERT INTO `category` VALUES ('5', 'Linux', null, '0');
INSERT INTO `category` VALUES ('6', 'Docker', null, '10');
INSERT INTO `category` VALUES ('7', 'Git', null, '0');
INSERT INTO `category` VALUES ('8', 'Redis', null, '0');
INSERT INTO `category` VALUES ('9', ' MongoDB', null, '0');
INSERT INTO `category` VALUES ('10', ' Mysql', null, '0');
INSERT INTO `category` VALUES ('11', 'SSM', null, '0');
INSERT INTO `category` VALUES ('12', ' Mybatis', null, '0');
INSERT INTO `category` VALUES ('13', ' JPA', null, '0');
INSERT INTO `category` VALUES ('14', ' SpringMVC', null, '0');
INSERT INTO `category` VALUES ('15', ' oAuth', null, '0');
INSERT INTO `category` VALUES ('16', ' Feign', null, '0');
INSERT INTO `category` VALUES ('17', ' Hystrix', null, '0');
INSERT INTO `category` VALUES ('18', ' Ribbon', null, '0');
INSERT INTO `category` VALUES ('19', ' Zuul', null, '0');
INSERT INTO `category` VALUES ('20', ' Shiro', null, '0');
INSERT INTO `category` VALUES ('21', ' Maven', null, '0');
INSERT INTO `category` VALUES ('22', ' Jenkins', null, '0');
INSERT INTO `category` VALUES ('23', ' Eureka', null, '0');
INSERT INTO `category` VALUES ('24', ' Netty', null, '0');
INSERT INTO `category` VALUES ('25', ' Angular', null, '0');
INSERT INTO `category` VALUES ('26', ' Vue', null, '0');
INSERT INTO `category` VALUES ('27', ' React', null, '0');
INSERT INTO `category` VALUES ('28', ' 区块链', null, '0');
INSERT INTO `category` VALUES ('29', 'OAuth', null, '0');
INSERT INTO `category` VALUES ('30', 'Oracle', null, '0');
INSERT INTO `category` VALUES ('31', '程序人生', null, '1');
INSERT INTO `category` VALUES ('32', 'JavaWeb', null, '1');

-- ----------------------------
-- Table structure for `friendslink`
-- ----------------------------
DROP TABLE IF EXISTS `friendslink`;
CREATE TABLE `friendslink` (
  `friendName` varchar(255) NOT NULL,
  `friendBlog` varchar(1000) DEFAULT NULL,
  `friendGithub` varchar(1000) DEFAULT NULL,
  `friendQQ` varchar(20) DEFAULT NULL,
  `friendUnit` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`friendName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of friendslink
-- ----------------------------

-- ----------------------------
-- Table structure for `log`
-- ----------------------------
DROP TABLE IF EXISTS `log`;
CREATE TABLE `log` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `username` varchar(20) DEFAULT NULL,
  `userIP` varchar(255) DEFAULT NULL,
  `actionClassName` varchar(255) DEFAULT NULL,
  `actionDate` datetime DEFAULT NULL,
  `result` text,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=571 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of log
-- ----------------------------
INSERT INTO `log` VALUES ('475', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:14:05', '用户：null');
INSERT INTO `log` VALUES ('476', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:14:41', '用户：hly');
INSERT INTO `log` VALUES ('477', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:14:51', '用户：hly');
INSERT INTO `log` VALUES ('478', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:17:02', '用户：null');
INSERT INTO `log` VALUES ('479', '', '192.168.43.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:18:55', '用户：null');
INSERT INTO `log` VALUES ('480', 'hly', '192.168.43.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:19:12', '用户：hly');
INSERT INTO `log` VALUES ('481', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:29:40', '用户：null');
INSERT INTO `log` VALUES ('482', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:30:37', '用户：null');
INSERT INTO `log` VALUES ('483', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:30:50', '用户：null');
INSERT INTO `log` VALUES ('484', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:30:50', '用户：null');
INSERT INTO `log` VALUES ('485', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:31:47', '用户：null');
INSERT INTO `log` VALUES ('486', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:31:55', '用户：hly');
INSERT INTO `log` VALUES ('487', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:31:59', '用户：hly');
INSERT INTO `log` VALUES ('488', '', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:33:24', '用户：null');
INSERT INTO `log` VALUES ('489', 'hly', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:33:32', '用户：hly');
INSERT INTO `log` VALUES ('490', 'hly', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:33:34', '用户：hly');
INSERT INTO `log` VALUES ('491', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:33:45', '用户：hly');
INSERT INTO `log` VALUES ('492', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:34:13', '用户：null');
INSERT INTO `log` VALUES ('493', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:39:37', '用户：null');
INSERT INTO `log` VALUES ('494', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:40:19', '用户：null');
INSERT INTO `log` VALUES ('495', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:40:26', '用户：null');
INSERT INTO `log` VALUES ('496', '', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:41:53', '用户：null');
INSERT INTO `log` VALUES ('497', '', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:42:01', '用户：null');
INSERT INTO `log` VALUES ('498', '', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:42:05', '用户：null');
INSERT INTO `log` VALUES ('499', '', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:42:14', '用户：null');
INSERT INTO `log` VALUES ('500', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:42:17', '用户：null');
INSERT INTO `log` VALUES ('501', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:43:27', '用户：null');
INSERT INTO `log` VALUES ('502', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:43:36', '用户：hly');
INSERT INTO `log` VALUES ('503', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:43:39', '用户：hly');
INSERT INTO `log` VALUES ('504', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:43:43', '用户：null');
INSERT INTO `log` VALUES ('505', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:43:50', '用户：hly');
INSERT INTO `log` VALUES ('506', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:44:02', '用户：hly');
INSERT INTO `log` VALUES ('507', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:44:08', '用户：null');
INSERT INTO `log` VALUES ('508', '', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:45:46', '用户：null');
INSERT INTO `log` VALUES ('509', 'hly', '127.0.0.1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:45:56', '用户：hly');
INSERT INTO `log` VALUES ('510', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:46:00', '用户：hly');
INSERT INTO `log` VALUES ('511', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:46:05', '用户：null');
INSERT INTO `log` VALUES ('512', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:47:33', '用户：null');
INSERT INTO `log` VALUES ('513', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:47:39', '用户：null');
INSERT INTO `log` VALUES ('514', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:48:06', '用户：null');
INSERT INTO `log` VALUES ('515', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:50:12', '用户：null');
INSERT INTO `log` VALUES ('516', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 04:50:29', '用户：null');
INSERT INTO `log` VALUES ('517', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 09:31:35', '用户：null');
INSERT INTO `log` VALUES ('518', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 09:31:47', '用户：hly');
INSERT INTO `log` VALUES ('519', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 09:31:56', '用户：null');
INSERT INTO `log` VALUES ('520', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:04:04', '用户：null');
INSERT INTO `log` VALUES ('521', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:04:13', '用户：null');
INSERT INTO `log` VALUES ('522', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:19:32', '用户：null');
INSERT INTO `log` VALUES ('523', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:19:43', '用户：hly');
INSERT INTO `log` VALUES ('524', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:20:37', '用户：hly');
INSERT INTO `log` VALUES ('525', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:20:49', '用户：hly');
INSERT INTO `log` VALUES ('526', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:21:09', '用户：hly');
INSERT INTO `log` VALUES ('527', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:21:25', '用户：hly');
INSERT INTO `log` VALUES ('528', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:21:28', '用户：hly');
INSERT INTO `log` VALUES ('529', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:21:37', '用户：hly');
INSERT INTO `log` VALUES ('530', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:21:48', '用户：hly');
INSERT INTO `log` VALUES ('531', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:22:21', '用户：hly');
INSERT INTO `log` VALUES ('532', '', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:26:17', '用户：null');
INSERT INTO `log` VALUES ('533', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:26:26', '用户：hly');
INSERT INTO `log` VALUES ('534', 'hly', '0:0:0:0:0:0:0:1', 'com.hly.sirius.filter.UserFilter', '2018-11-22 10:26:28', '用户：hly');
INSERT INTO `log` VALUES ('535', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 01:05:22', '用户：hly');
INSERT INTO `log` VALUES ('536', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 01:05:26', '用户：null');
INSERT INTO `log` VALUES ('537', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 01:05:46', '用户：hly');
INSERT INTO `log` VALUES ('538', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 01:16:02', '用户：hly');
INSERT INTO `log` VALUES ('539', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 01:16:06', '用户：null');
INSERT INTO `log` VALUES ('540', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 01:16:17', '用户：hly');
INSERT INTO `log` VALUES ('541', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 01:21:56', '用户：hly');
INSERT INTO `log` VALUES ('542', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 02:34:06', '用户：null');
INSERT INTO `log` VALUES ('543', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 02:34:17', '用户：hly');
INSERT INTO `log` VALUES ('544', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 02:42:19', '用户：hly');
INSERT INTO `log` VALUES ('545', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 02:51:04', '用户：hly');
INSERT INTO `log` VALUES ('546', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 02:51:22', '用户：hly');
INSERT INTO `log` VALUES ('547', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 02:51:25', '用户：null');
INSERT INTO `log` VALUES ('548', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 02:51:35', '用户：hly');
INSERT INTO `log` VALUES ('549', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 03:14:50', '用户：hly');
INSERT INTO `log` VALUES ('550', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 03:15:00', '用户：null');
INSERT INTO `log` VALUES ('551', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 03:15:10', '用户：hly');
INSERT INTO `log` VALUES ('552', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 03:15:15', '用户：null');
INSERT INTO `log` VALUES ('553', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 03:24:28', '用户：null');
INSERT INTO `log` VALUES ('554', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 03:24:28', '用户：null');
INSERT INTO `log` VALUES ('555', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-23 07:48:18', '用户：null');
INSERT INTO `log` VALUES ('556', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-29 11:39:06', '用户：null');
INSERT INTO `log` VALUES ('557', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-29 11:39:16', '用户：hly');
INSERT INTO `log` VALUES ('558', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-29 11:41:37', '用户：hly');
INSERT INTO `log` VALUES ('559', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-29 11:41:40', '用户：null');
INSERT INTO `log` VALUES ('560', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-29 01:54:11', '用户：null');
INSERT INTO `log` VALUES ('561', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-29 01:54:24', '用户：hly');
INSERT INTO `log` VALUES ('562', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-29 02:26:37', '用户：hly');
INSERT INTO `log` VALUES ('563', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-29 02:27:52', '用户：hly');
INSERT INTO `log` VALUES ('564', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-30 05:22:19', '用户：null');
INSERT INTO `log` VALUES ('565', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-30 05:22:32', '用户：hly');
INSERT INTO `log` VALUES ('566', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-30 05:23:01', '用户：hly');
INSERT INTO `log` VALUES ('567', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-30 09:32:15', '用户：null');
INSERT INTO `log` VALUES ('568', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-30 09:32:24', '用户：hly');
INSERT INTO `log` VALUES ('569', 'hly', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-30 09:32:53', '用户：hly');
INSERT INTO `log` VALUES ('570', '', '111.14.210.182', 'com.hly.sirius.filter.UserFilter', '2018-11-30 11:06:12', '用户：null');

-- ----------------------------
-- Table structure for `user`
-- ----------------------------
DROP TABLE IF EXISTS `user`;
CREATE TABLE `user` (
  `username` varchar(20) NOT NULL,
  `password` varchar(1000) NOT NULL,
  PRIMARY KEY (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of user
-- ----------------------------
INSERT INTO `user` VALUES ('hly', '4a1f9c0d66ee9063c31ea2c4adeb9617');

-- ----------------------------
-- Table structure for `userinfo`
-- ----------------------------
DROP TABLE IF EXISTS `userinfo`;
CREATE TABLE `userinfo` (
  `username` varchar(20) NOT NULL,
  `userNickName` varchar(20) DEFAULT NULL,
  `userEmail` varchar(255) DEFAULT NULL,
  `userBlog` varchar(255) DEFAULT NULL,
  `userUnit` varchar(255) DEFAULT NULL,
  `userQQ` varchar(255) DEFAULT NULL,
  `userWeChat` varchar(255) DEFAULT NULL,
  `userWisdom` varchar(255) DEFAULT NULL,
  `userProfile` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`username`),
  CONSTRAINT `FK_USER_USERINFO` FOREIGN KEY (`username`) REFERENCES `user` (`username`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of userinfo
-- ----------------------------

-- ----------------------------
-- Table structure for `visitor`
-- ----------------------------
DROP TABLE IF EXISTS `visitor`;
CREATE TABLE `visitor` (
  `visitorId` int(11) NOT NULL AUTO_INCREMENT,
  `visitorIP` varchar(255) DEFAULT NULL,
  `visitorViewNum` int(11) DEFAULT '0',
  `visitorLastTime` datetime DEFAULT NULL,
  PRIMARY KEY (`visitorId`)
) ENGINE=InnoDB AUTO_INCREMENT=294 DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of visitor
-- ----------------------------
INSERT INTO `visitor` VALUES ('28', '111.14.210.182', '53', '2018-11-30 11:06:02');
INSERT INTO `visitor` VALUES ('29', '123.11.247.195', '0', '2018-11-23 08:30:17');
INSERT INTO `visitor` VALUES ('30', '159.65.124.253', '0', '2018-11-23 09:20:05');
INSERT INTO `visitor` VALUES ('31', '197.232.19.137', '0', '2018-11-23 09:53:28');
INSERT INTO `visitor` VALUES ('32', '54.84.62.214', '0', '2018-11-23 10:22:36');
INSERT INTO `visitor` VALUES ('33', '110.44.119.244', '0', '2018-11-23 10:38:06');
INSERT INTO `visitor` VALUES ('34', '101.201.116.10', '0', '2018-11-23 10:53:11');
INSERT INTO `visitor` VALUES ('35', '112.74.64.103', '0', '2018-11-23 10:54:23');
INSERT INTO `visitor` VALUES ('36', '120.25.12.103', '1', '2018-11-23 11:24:53');
INSERT INTO `visitor` VALUES ('37', '31.184.195.108', '1', '2018-11-26 05:20:20');
INSERT INTO `visitor` VALUES ('38', '123.57.188.1', '0', '2018-11-23 11:02:34');
INSERT INTO `visitor` VALUES ('39', '120.27.240.1', '0', '2018-11-23 11:02:54');
INSERT INTO `visitor` VALUES ('40', '47.94.184.1', '0', '2018-11-23 11:16:09');
INSERT INTO `visitor` VALUES ('41', '120.76.40.140', '0', '2018-11-23 11:26:08');
INSERT INTO `visitor` VALUES ('42', '117.182.195.213', '0', '2018-11-23 11:46:05');
INSERT INTO `visitor` VALUES ('43', '121.69.89.214', '0', '2018-11-23 12:46:15');
INSERT INTO `visitor` VALUES ('44', '203.208.60.120', '0', '2018-11-23 01:07:50');
INSERT INTO `visitor` VALUES ('45', '5.234.145.135', '0', '2018-11-23 01:11:48');
INSERT INTO `visitor` VALUES ('46', '120.25.200.162', '0', '2018-11-23 01:47:01');
INSERT INTO `visitor` VALUES ('47', '125.167.110.249', '0', '2018-11-23 01:51:20');
INSERT INTO `visitor` VALUES ('48', '78.187.31.224', '0', '2018-11-23 03:29:08');
INSERT INTO `visitor` VALUES ('49', '101.201.140.157', '0', '2018-11-23 04:18:03');
INSERT INTO `visitor` VALUES ('50', '146.158.89.202', '0', '2018-11-23 04:24:23');
INSERT INTO `visitor` VALUES ('51', '220.132.137.60', '0', '2018-11-23 04:30:43');
INSERT INTO `visitor` VALUES ('52', '185.28.102.77', '0', '2018-11-23 04:52:27');
INSERT INTO `visitor` VALUES ('53', '102.165.48.141', '0', '2018-11-23 05:56:00');
INSERT INTO `visitor` VALUES ('54', '118.178.120.10', '0', '2018-11-23 06:07:48');
INSERT INTO `visitor` VALUES ('55', '92.50.45.234', '0', '2018-11-23 06:35:38');
INSERT INTO `visitor` VALUES ('56', '47.97.23.199', '0', '2018-11-23 06:57:09');
INSERT INTO `visitor` VALUES ('57', '60.191.38.77', '3', '2018-11-29 01:26:19');
INSERT INTO `visitor` VALUES ('58', '109.121.167.142', '0', '2018-11-23 07:58:42');
INSERT INTO `visitor` VALUES ('59', '185.155.13.76', '0', '2018-11-23 08:00:19');
INSERT INTO `visitor` VALUES ('60', '120.25.100.102', '0', '2018-11-23 08:23:27');
INSERT INTO `visitor` VALUES ('61', '223.157.20.184', '0', '2018-11-23 09:09:31');
INSERT INTO `visitor` VALUES ('62', '196.52.43.62', '0', '2018-11-23 09:13:23');
INSERT INTO `visitor` VALUES ('63', '71.6.202.204', '1', '2018-11-28 03:20:20');
INSERT INTO `visitor` VALUES ('64', '201.13.205.129', '0', '2018-11-23 09:17:26');
INSERT INTO `visitor` VALUES ('65', '40.77.167.209', '0', '2018-11-23 09:20:47');
INSERT INTO `visitor` VALUES ('66', '119.23.174.205', '0', '2018-11-23 10:30:59');
INSERT INTO `visitor` VALUES ('67', '122.228.19.79', '0', '2018-11-23 10:31:08');
INSERT INTO `visitor` VALUES ('68', '159.89.46.148', '0', '2018-11-23 10:31:42');
INSERT INTO `visitor` VALUES ('69', '182.92.228.10', '0', '2018-11-23 10:31:55');
INSERT INTO `visitor` VALUES ('70', '58.255.230.194', '0', '2018-11-24 12:48:40');
INSERT INTO `visitor` VALUES ('71', '106.15.202.177', '0', '2018-11-24 01:01:19');
INSERT INTO `visitor` VALUES ('72', '117.136.94.130', '1', '2018-11-26 12:53:27');
INSERT INTO `visitor` VALUES ('73', '31.192.136.219', '0', '2018-11-24 03:33:01');
INSERT INTO `visitor` VALUES ('74', '5.202.126.190', '0', '2018-11-24 04:15:05');
INSERT INTO `visitor` VALUES ('75', '78.14.220.42', '0', '2018-11-24 04:15:16');
INSERT INTO `visitor` VALUES ('76', '139.162.119.197', '1', '2018-11-26 09:15:22');
INSERT INTO `visitor` VALUES ('77', '189.47.243.184', '2', '2018-11-24 06:38:09');
INSERT INTO `visitor` VALUES ('78', '23.236.57.135', '0', '2018-11-24 09:32:41');
INSERT INTO `visitor` VALUES ('79', '181.210.51.131', '0', '2018-11-24 12:27:36');
INSERT INTO `visitor` VALUES ('80', '194.218.145.83', '0', '2018-11-24 12:53:31');
INSERT INTO `visitor` VALUES ('81', '180.163.220.3', '0', '2018-11-24 01:00:36');
INSERT INTO `visitor` VALUES ('82', '42.236.10.78', '0', '2018-11-24 01:00:47');
INSERT INTO `visitor` VALUES ('83', '101.199.120.145', '0', '2018-11-24 01:01:22');
INSERT INTO `visitor` VALUES ('84', '180.163.220.45', '0', '2018-11-24 01:10:34');
INSERT INTO `visitor` VALUES ('85', '180.163.220.46', '0', '2018-11-24 01:10:42');
INSERT INTO `visitor` VALUES ('86', '113.121.210.0', '0', '2018-11-24 04:06:32');
INSERT INTO `visitor` VALUES ('87', '177.45.42.75', '0', '2018-11-24 04:40:26');
INSERT INTO `visitor` VALUES ('88', '78.188.66.84', '0', '2018-11-24 05:05:47');
INSERT INTO `visitor` VALUES ('89', '193.108.241.19', '0', '2018-11-24 05:38:19');
INSERT INTO `visitor` VALUES ('90', '114.4.146.50', '0', '2018-11-24 06:20:36');
INSERT INTO `visitor` VALUES ('91', '120.26.160.112', '0', '2018-11-24 06:25:13');
INSERT INTO `visitor` VALUES ('92', '144.202.67.95', '0', '2018-11-24 06:42:49');
INSERT INTO `visitor` VALUES ('93', '122.11.200.1', '0', '2018-11-24 07:03:55');
INSERT INTO `visitor` VALUES ('94', '47.97.10.19', '1', '2018-11-27 04:44:26');
INSERT INTO `visitor` VALUES ('95', '27.25.234.9', '0', '2018-11-24 08:05:37');
INSERT INTO `visitor` VALUES ('96', '120.55.81.217', '0', '2018-11-24 08:44:16');
INSERT INTO `visitor` VALUES ('97', '201.27.88.97', '0', '2018-11-24 09:21:32');
INSERT INTO `visitor` VALUES ('98', '95.6.25.240', '0', '2018-11-24 11:05:25');
INSERT INTO `visitor` VALUES ('99', '98.143.63.39', '0', '2018-11-24 11:10:07');
INSERT INTO `visitor` VALUES ('100', '120.78.231.236', '0', '2018-11-24 11:39:04');
INSERT INTO `visitor` VALUES ('101', '120.192.36.68', '0', '2018-11-25 12:03:50');
INSERT INTO `visitor` VALUES ('102', '39.173.42.21', '0', '2018-11-25 12:04:14');
INSERT INTO `visitor` VALUES ('103', '90.47.136.43', '0', '2018-11-25 12:35:49');
INSERT INTO `visitor` VALUES ('104', '120.192.26.155', '0', '2018-11-25 01:55:32');
INSERT INTO `visitor` VALUES ('105', '61.129.6.203', '0', '2018-11-25 01:56:32');
INSERT INTO `visitor` VALUES ('106', '177.9.101.241', '1', '2018-11-25 03:04:57');
INSERT INTO `visitor` VALUES ('107', '95.86.210.89', '0', '2018-11-25 03:12:49');
INSERT INTO `visitor` VALUES ('108', '110.53.172.221', '0', '2018-11-25 03:43:49');
INSERT INTO `visitor` VALUES ('109', '139.170.64.214', '0', '2018-11-25 03:54:05');
INSERT INTO `visitor` VALUES ('110', '120.36.122.253', '0', '2018-11-25 03:54:06');
INSERT INTO `visitor` VALUES ('111', '171.34.218.208', '0', '2018-11-25 03:54:11');
INSERT INTO `visitor` VALUES ('112', '124.88.64.206', '0', '2018-11-25 03:54:18');
INSERT INTO `visitor` VALUES ('113', '1.80.69.120', '0', '2018-11-25 03:54:19');
INSERT INTO `visitor` VALUES ('114', '71.6.158.166', '0', '2018-11-25 04:41:57');
INSERT INTO `visitor` VALUES ('115', '189.19.155.185', '0', '2018-11-25 05:26:46');
INSERT INTO `visitor` VALUES ('116', '121.40.130.66', '2', '2018-11-30 10:06:09');
INSERT INTO `visitor` VALUES ('117', '67.82.155.56', '0', '2018-11-25 07:00:38');
INSERT INTO `visitor` VALUES ('118', '175.5.249.13', '0', '2018-11-25 07:07:06');
INSERT INTO `visitor` VALUES ('119', '191.193.83.119', '0', '2018-11-25 07:46:50');
INSERT INTO `visitor` VALUES ('120', '101.132.67.50', '0', '2018-11-25 08:21:36');
INSERT INTO `visitor` VALUES ('121', '200.206.202.221', '0', '2018-11-25 08:31:57');
INSERT INTO `visitor` VALUES ('122', '188.25.159.147', '0', '2018-11-25 09:30:39');
INSERT INTO `visitor` VALUES ('123', '168.0.83.81', '0', '2018-11-25 09:44:39');
INSERT INTO `visitor` VALUES ('124', '51.137.110.154', '0', '2018-11-25 09:47:53');
INSERT INTO `visitor` VALUES ('125', '220.249.151.215', '0', '2018-11-25 11:05:47');
INSERT INTO `visitor` VALUES ('126', '91.240.62.1', '0', '2018-11-25 11:44:12');
INSERT INTO `visitor` VALUES ('127', '112.119.233.94', '0', '2018-11-25 11:52:55');
INSERT INTO `visitor` VALUES ('128', '60.191.52.254', '1', '2018-11-28 09:43:50');
INSERT INTO `visitor` VALUES ('129', '193.106.147.100', '0', '2018-11-25 01:10:04');
INSERT INTO `visitor` VALUES ('130', '203.150.66.17', '1', '2018-11-25 01:12:08');
INSERT INTO `visitor` VALUES ('131', '31.31.235.46', '0', '2018-11-25 01:16:00');
INSERT INTO `visitor` VALUES ('132', '60.174.38.117', '0', '2018-11-25 03:36:20');
INSERT INTO `visitor` VALUES ('133', '106.15.76.85', '0', '2018-11-25 04:09:11');
INSERT INTO `visitor` VALUES ('134', '177.75.125.16', '0', '2018-11-25 04:51:25');
INSERT INTO `visitor` VALUES ('135', '121.199.0.123', '0', '2018-11-25 06:24:50');
INSERT INTO `visitor` VALUES ('136', '178.73.215.171', '0', '2018-11-25 06:30:43');
INSERT INTO `visitor` VALUES ('137', '60.1.171.219', '0', '2018-11-25 06:41:10');
INSERT INTO `visitor` VALUES ('138', '106.15.53.214', '0', '2018-11-25 08:07:25');
INSERT INTO `visitor` VALUES ('139', '201.13.97.247', '0', '2018-11-25 08:27:46');
INSERT INTO `visitor` VALUES ('140', '138.118.101.168', '0', '2018-11-25 08:29:30');
INSERT INTO `visitor` VALUES ('141', '94.137.115.176', '0', '2018-11-25 08:30:31');
INSERT INTO `visitor` VALUES ('142', '182.253.252.202', '0', '2018-11-25 08:37:53');
INSERT INTO `visitor` VALUES ('143', '178.62.14.105', '0', '2018-11-25 08:38:49');
INSERT INTO `visitor` VALUES ('144', '39.107.114.182', '1', '2018-11-27 12:53:23');
INSERT INTO `visitor` VALUES ('145', '85.102.238.169', '0', '2018-11-25 10:24:21');
INSERT INTO `visitor` VALUES ('146', '1.36.234.6', '0', '2018-11-25 10:42:10');
INSERT INTO `visitor` VALUES ('147', '134.249.186.66', '0', '2018-11-25 11:19:47');
INSERT INTO `visitor` VALUES ('148', '194.152.35.85', '0', '2018-11-25 11:20:33');
INSERT INTO `visitor` VALUES ('149', '79.133.123.30', '0', '2018-11-25 11:25:04');
INSERT INTO `visitor` VALUES ('150', '61.151.178.166', '0', '2018-11-26 12:54:27');
INSERT INTO `visitor` VALUES ('151', '43.252.72.122', '0', '2018-11-26 01:41:30');
INSERT INTO `visitor` VALUES ('152', '62.219.14.94', '0', '2018-11-26 02:46:20');
INSERT INTO `visitor` VALUES ('153', '181.48.147.254', '0', '2018-11-26 03:05:36');
INSERT INTO `visitor` VALUES ('154', '60.182.167.79', '0', '2018-11-26 03:18:33');
INSERT INTO `visitor` VALUES ('155', '61.63.181.37', '0', '2018-11-26 03:49:44');
INSERT INTO `visitor` VALUES ('156', '101.85.217.19', '3', '2018-11-29 01:43:20');
INSERT INTO `visitor` VALUES ('157', '189.68.138.201', '0', '2018-11-26 04:45:50');
INSERT INTO `visitor` VALUES ('158', '205.205.150.9', '5', '2018-11-29 10:26:26');
INSERT INTO `visitor` VALUES ('159', '41.60.237.210', '0', '2018-11-26 05:30:22');
INSERT INTO `visitor` VALUES ('160', '107.170.213.60', '0', '2018-11-26 05:30:45');
INSERT INTO `visitor` VALUES ('161', '178.128.30.249', '0', '2018-11-26 05:37:46');
INSERT INTO `visitor` VALUES ('162', '170.233.47.18', '0', '2018-11-26 08:07:53');
INSERT INTO `visitor` VALUES ('163', '112.122.143.234', '0', '2018-11-26 08:56:47');
INSERT INTO `visitor` VALUES ('164', '185.180.130.2', '0', '2018-11-26 08:57:48');
INSERT INTO `visitor` VALUES ('165', '94.64.246.247', '0', '2018-11-26 08:59:53');
INSERT INTO `visitor` VALUES ('166', '201.68.14.198', '0', '2018-11-26 09:11:27');
INSERT INTO `visitor` VALUES ('167', '91.247.105.163', '0', '2018-11-26 01:56:42');
INSERT INTO `visitor` VALUES ('168', '177.9.23.50', '0', '2018-11-26 02:03:06');
INSERT INTO `visitor` VALUES ('169', '14.207.225.69', '0', '2018-11-26 03:06:19');
INSERT INTO `visitor` VALUES ('170', '222.169.86.19', '1', '2018-11-26 03:16:08');
INSERT INTO `visitor` VALUES ('171', '146.66.37.132', '0', '2018-11-26 03:57:47');
INSERT INTO `visitor` VALUES ('172', '218.8.211.124', '0', '2018-11-26 04:20:18');
INSERT INTO `visitor` VALUES ('173', '190.195.17.223', '0', '2018-11-26 04:39:23');
INSERT INTO `visitor` VALUES ('174', '58.182.97.37', '0', '2018-11-26 04:43:17');
INSERT INTO `visitor` VALUES ('175', '59.102.72.210', '0', '2018-11-26 04:46:14');
INSERT INTO `visitor` VALUES ('176', '47.95.28.143', '1', '2018-11-29 08:23:35');
INSERT INTO `visitor` VALUES ('177', '106.14.104.214', '0', '2018-11-26 05:20:42');
INSERT INTO `visitor` VALUES ('178', '139.196.12.114', '0', '2018-11-26 06:25:38');
INSERT INTO `visitor` VALUES ('179', '189.79.48.58', '0', '2018-11-26 07:57:12');
INSERT INTO `visitor` VALUES ('180', '179.106.102.165', '0', '2018-11-26 08:15:57');
INSERT INTO `visitor` VALUES ('181', '188.212.238.160', '0', '2018-11-26 10:05:47');
INSERT INTO `visitor` VALUES ('182', '222.164.163.175', '0', '2018-11-26 10:54:25');
INSERT INTO `visitor` VALUES ('183', '1.180.197.2', '0', '2018-11-26 11:15:11');
INSERT INTO `visitor` VALUES ('184', '219.144.51.130', '0', '2018-11-26 11:15:24');
INSERT INTO `visitor` VALUES ('185', '122.52.125.140', '0', '2018-11-27 12:10:08');
INSERT INTO `visitor` VALUES ('186', '5.206.245.104', '0', '2018-11-27 01:57:21');
INSERT INTO `visitor` VALUES ('187', '117.136.94.187', '1', '2018-11-27 09:44:23');
INSERT INTO `visitor` VALUES ('188', '118.233.39.11', '0', '2018-11-27 02:22:52');
INSERT INTO `visitor` VALUES ('189', '61.151.178.165', '0', '2018-11-27 02:23:20');
INSERT INTO `visitor` VALUES ('190', '36.35.132.95', '0', '2018-11-27 02:50:18');
INSERT INTO `visitor` VALUES ('191', '149.140.159.62', '0', '2018-11-27 03:21:34');
INSERT INTO `visitor` VALUES ('192', '1.55.240.244', '0', '2018-11-27 04:36:05');
INSERT INTO `visitor` VALUES ('193', '180.92.231.82', '0', '2018-11-27 07:35:59');
INSERT INTO `visitor` VALUES ('194', '110.19.109.170', '0', '2018-11-27 09:33:45');
INSERT INTO `visitor` VALUES ('195', '202.142.154.90', '0', '2018-11-27 10:11:10');
INSERT INTO `visitor` VALUES ('196', '112.118.255.80', '0', '2018-11-27 10:15:18');
INSERT INTO `visitor` VALUES ('197', '104.248.211.38', '0', '2018-11-27 10:33:39');
INSERT INTO `visitor` VALUES ('198', '91.237.7.88', '0', '2018-11-27 11:07:28');
INSERT INTO `visitor` VALUES ('199', '41.60.238.197', '0', '2018-11-27 11:20:00');
INSERT INTO `visitor` VALUES ('200', '200.208.114.37', '0', '2018-11-27 12:26:15');
INSERT INTO `visitor` VALUES ('201', '46.174.215.54', '0', '2018-11-27 12:37:36');
INSERT INTO `visitor` VALUES ('202', '218.203.103.107', '0', '2018-11-27 12:54:19');
INSERT INTO `visitor` VALUES ('203', '92.242.230.47', '0', '2018-11-27 12:54:40');
INSERT INTO `visitor` VALUES ('204', '212.55.237.14', '0', '2018-11-27 01:19:03');
INSERT INTO `visitor` VALUES ('205', '116.49.131.52', '0', '2018-11-27 01:22:11');
INSERT INTO `visitor` VALUES ('206', '196.52.43.99', '0', '2018-11-27 01:30:37');
INSERT INTO `visitor` VALUES ('207', '198.108.66.96', '0', '2018-11-27 01:50:56');
INSERT INTO `visitor` VALUES ('208', '91.93.63.19', '0', '2018-11-27 02:37:50');
INSERT INTO `visitor` VALUES ('209', '120.77.57.35', '0', '2018-11-27 03:14:55');
INSERT INTO `visitor` VALUES ('210', '47.94.39.226', '0', '2018-11-27 05:12:30');
INSERT INTO `visitor` VALUES ('211', '101.200.228.31', '0', '2018-11-27 06:24:59');
INSERT INTO `visitor` VALUES ('212', '88.238.37.166', '0', '2018-11-27 07:03:20');
INSERT INTO `visitor` VALUES ('213', '93.126.28.219', '0', '2018-11-27 07:28:49');
INSERT INTO `visitor` VALUES ('214', '122.6.92.140', '0', '2018-11-27 07:31:04');
INSERT INTO `visitor` VALUES ('215', '159.224.147.172', '0', '2018-11-27 08:21:11');
INSERT INTO `visitor` VALUES ('216', '5.55.99.62', '0', '2018-11-27 08:25:32');
INSERT INTO `visitor` VALUES ('217', '47.92.133.31', '0', '2018-11-27 08:38:03');
INSERT INTO `visitor` VALUES ('218', '78.158.160.68', '0', '2018-11-27 10:09:38');
INSERT INTO `visitor` VALUES ('219', '197.48.140.125', '0', '2018-11-27 10:15:11');
INSERT INTO `visitor` VALUES ('220', '168.196.131.127', '0', '2018-11-27 11:02:39');
INSERT INTO `visitor` VALUES ('221', '112.122.199.161', '0', '2018-11-27 11:15:59');
INSERT INTO `visitor` VALUES ('222', '108.114.221.141', '0', '2018-11-28 12:02:28');
INSERT INTO `visitor` VALUES ('223', '92.112.52.66', '0', '2018-11-28 12:54:45');
INSERT INTO `visitor` VALUES ('224', '112.98.155.241', '0', '2018-11-28 03:03:39');
INSERT INTO `visitor` VALUES ('225', '201.196.150.22', '0', '2018-11-28 04:44:01');
INSERT INTO `visitor` VALUES ('226', '45.231.28.6', '0', '2018-11-28 04:55:49');
INSERT INTO `visitor` VALUES ('227', '98.102.135.162', '0', '2018-11-28 06:51:41');
INSERT INTO `visitor` VALUES ('228', '103.36.125.138', '0', '2018-11-28 08:14:24');
INSERT INTO `visitor` VALUES ('229', '36.89.118.25', '0', '2018-11-28 08:38:44');
INSERT INTO `visitor` VALUES ('230', '39.172.250.76', '0', '2018-11-28 10:39:50');
INSERT INTO `visitor` VALUES ('231', '206.189.128.189', '0', '2018-11-28 10:53:55');
INSERT INTO `visitor` VALUES ('232', '123.125.71.25', '0', '2018-11-28 11:36:07');
INSERT INTO `visitor` VALUES ('233', '189.18.101.18', '0', '2018-11-28 02:11:11');
INSERT INTO `visitor` VALUES ('234', '186.33.182.89', '0', '2018-11-28 03:14:01');
INSERT INTO `visitor` VALUES ('235', '103.233.123.66', '0', '2018-11-28 03:43:16');
INSERT INTO `visitor` VALUES ('236', '101.255.69.2', '0', '2018-11-28 03:59:22');
INSERT INTO `visitor` VALUES ('237', '112.124.0.105', '0', '2018-11-28 06:23:39');
INSERT INTO `visitor` VALUES ('238', '47.100.130.114', '0', '2018-11-28 07:07:32');
INSERT INTO `visitor` VALUES ('239', '46.1.59.192', '0', '2018-11-28 08:47:14');
INSERT INTO `visitor` VALUES ('240', '39.104.80.88', '0', '2018-11-28 09:07:26');
INSERT INTO `visitor` VALUES ('241', '39.104.95.77', '1', '2018-11-28 09:07:52');
INSERT INTO `visitor` VALUES ('242', '82.178.192.207', '0', '2018-11-28 09:08:46');
INSERT INTO `visitor` VALUES ('243', '123.55.28.34', '0', '2018-11-28 10:04:14');
INSERT INTO `visitor` VALUES ('244', '106.14.24.127', '0', '2018-11-28 10:58:38');
INSERT INTO `visitor` VALUES ('245', '109.242.47.5', '0', '2018-11-29 01:02:16');
INSERT INTO `visitor` VALUES ('246', '195.112.123.138', '0', '2018-11-29 01:51:59');
INSERT INTO `visitor` VALUES ('247', '117.136.77.185', '5', '2018-11-30 03:14:01');
INSERT INTO `visitor` VALUES ('248', '101.227.139.172', '0', '2018-11-29 02:04:42');
INSERT INTO `visitor` VALUES ('249', '95.188.89.251', '0', '2018-11-29 02:43:48');
INSERT INTO `visitor` VALUES ('250', '183.67.57.158', '1', '2018-11-29 03:00:27');
INSERT INTO `visitor` VALUES ('251', '139.224.112.110', '0', '2018-11-29 03:22:51');
INSERT INTO `visitor` VALUES ('252', '185.234.219.228', '0', '2018-11-29 03:44:51');
INSERT INTO `visitor` VALUES ('253', '138.0.227.73', '0', '2018-11-29 03:58:10');
INSERT INTO `visitor` VALUES ('254', '93.113.124.199', '0', '2018-11-29 04:03:31');
INSERT INTO `visitor` VALUES ('255', '113.117.105.92', '0', '2018-11-29 05:08:33');
INSERT INTO `visitor` VALUES ('256', '120.33.185.70', '0', '2018-11-29 05:08:44');
INSERT INTO `visitor` VALUES ('257', '185.126.7.42', '0', '2018-11-29 06:03:07');
INSERT INTO `visitor` VALUES ('258', '87.255.198.207', '0', '2018-11-29 06:33:03');
INSERT INTO `visitor` VALUES ('259', '78.32.150.234', '0', '2018-11-29 09:04:58');
INSERT INTO `visitor` VALUES ('260', '117.170.203.5', '0', '2018-11-29 09:10:56');
INSERT INTO `visitor` VALUES ('261', '35.198.63.137', '0', '2018-11-29 11:02:33');
INSERT INTO `visitor` VALUES ('262', '60.191.38.78', '0', '2018-11-29 11:06:01');
INSERT INTO `visitor` VALUES ('263', '60.217.72.12', '1', '2018-11-29 12:16:08');
INSERT INTO `visitor` VALUES ('264', '103.212.128.37', '0', '2018-11-29 12:54:02');
INSERT INTO `visitor` VALUES ('265', '125.64.94.201', '0', '2018-11-29 01:58:31');
INSERT INTO `visitor` VALUES ('266', '121.51.32.144', '0', '2018-11-29 02:25:03');
INSERT INTO `visitor` VALUES ('267', '139.162.102.14', '0', '2018-11-29 02:48:23');
INSERT INTO `visitor` VALUES ('268', '110.88.23.8', '0', '2018-11-29 03:02:54');
INSERT INTO `visitor` VALUES ('269', '106.102.1.27', '0', '2018-11-29 03:07:58');
INSERT INTO `visitor` VALUES ('270', '188.120.232.161', '0', '2018-11-29 03:23:33');
INSERT INTO `visitor` VALUES ('271', '47.100.64.86', '0', '2018-11-29 04:26:51');
INSERT INTO `visitor` VALUES ('272', '211.36.135.185', '0', '2018-11-29 05:20:05');
INSERT INTO `visitor` VALUES ('273', '188.212.164.185', '0', '2018-11-29 06:30:57');
INSERT INTO `visitor` VALUES ('274', '5.235.188.228', '0', '2018-11-29 07:06:20');
INSERT INTO `visitor` VALUES ('275', '117.188.21.164', '0', '2018-11-29 07:14:23');
INSERT INTO `visitor` VALUES ('276', '95.176.189.181', '0', '2018-11-29 08:24:26');
INSERT INTO `visitor` VALUES ('277', '103.62.136.46', '0', '2018-11-29 09:03:11');
INSERT INTO `visitor` VALUES ('278', '109.232.138.82', '0', '2018-11-29 10:45:26');
INSERT INTO `visitor` VALUES ('279', '177.9.255.179', '0', '2018-11-29 11:10:12');
INSERT INTO `visitor` VALUES ('280', '219.145.221.12', '0', '2018-11-29 11:14:08');
INSERT INTO `visitor` VALUES ('281', '119.138.205.162', '0', '2018-11-29 11:14:51');
INSERT INTO `visitor` VALUES ('282', '47.92.155.0', '0', '2018-11-29 11:39:17');
INSERT INTO `visitor` VALUES ('283', '191.5.185.180', '0', '2018-11-30 01:33:38');
INSERT INTO `visitor` VALUES ('284', '101.89.239.230', '0', '2018-11-30 02:58:29');
INSERT INTO `visitor` VALUES ('285', '117.132.183.17', '0', '2018-11-30 03:17:21');
INSERT INTO `visitor` VALUES ('286', '111.43.226.16', '0', '2018-11-30 03:31:48');
INSERT INTO `visitor` VALUES ('287', '111.29.146.30', '1', '2018-11-30 04:00:57');
INSERT INTO `visitor` VALUES ('288', '180.163.220.68', '0', '2018-11-30 04:18:03');
INSERT INTO `visitor` VALUES ('289', '0:0:0:0:0:0:0:1', '76', '2018-11-30 08:09:12');
INSERT INTO `visitor` VALUES ('290', '127.0.0.1', '12', '2018-11-30 07:10:00');
INSERT INTO `visitor` VALUES ('291', '94.102.49.193', '0', '2018-11-30 05:03:31');
INSERT INTO `visitor` VALUES ('292', '171.13.14.59', '0', '2018-11-30 05:45:51');
INSERT INTO `visitor` VALUES ('293', '171.13.14.53', '0', '2018-11-30 05:45:51');

-- ----------------------------
-- Table structure for `webinfo`
-- ----------------------------
DROP TABLE IF EXISTS `webinfo`;
CREATE TABLE `webinfo` (
  `webName` varchar(20) NOT NULL,
  `webViewNum` int(11) DEFAULT NULL,
  `webViewIPNum` int(11) DEFAULT NULL,
  PRIMARY KEY (`webName`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of webinfo
-- ----------------------------
INSERT INTO `webinfo` VALUES ('天狼星的博客', '295', null);

-- ----------------------------
-- Table structure for `wisdom`
-- ----------------------------
DROP TABLE IF EXISTS `wisdom`;
CREATE TABLE `wisdom` (
  `wisdomId` int(11) NOT NULL AUTO_INCREMENT,
  `wisdomContent` varchar(255) DEFAULT NULL,
  `wisdomAddTime` datetime DEFAULT NULL,
  PRIMARY KEY (`wisdomId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

-- ----------------------------
-- Records of wisdom
-- ----------------------------
DELIMITER ;;
CREATE TRIGGER `deleteArticle` AFTER DELETE ON `article_category` FOR EACH ROW BEGIN
UPDATE category SET categoryArticleNum =categoryArticleNum-1 WHERE category.categoryId = old.categoryId;
-- DELETE FROM article WHERE article.articleId =old.articleId;

END
;;
DELIMITER ;
